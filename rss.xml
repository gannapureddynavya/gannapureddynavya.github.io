<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://genicsblog.com/rss.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-06-29T07:06:10+00:00</updated><id>https://genicsblog.com/rss.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community.</subtitle><entry><title type="html">How not to write clean code in React? üßπ</title><link href="https://genicsblog.com/avneesh/how-not-to-write-clean-code-in-react" rel="alternate" type="text/html" title="How not to write clean code in React? üßπ"/><published>2022-06-17T00:00:00+00:00</published><updated>2022-06-17T00:00:00+00:00</updated><id>https://genicsblog.com/avneesh/how-not-to-write-clean-code-in-react</id><content type="html" xml:base="https://genicsblog.com/avneesh/how-not-to-write-clean-code-in-react"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Wassup everyone, long time no see. Today we will see a few ways to not clean code in React, let‚Äôs jump right into it!</p> <p><img src="https://media1.giphy.com/media/iMBEgyXkFBtdCFS93i/200.gif" alt="Jump right into it"/></p> <h2 id="10-ways-to-not-write-clean-code">10 ways to not write clean code</h2> <h3 id="not-using-a-linter">Not using a linter</h3> <p>Who needs a linter to keep good code styles, and keep the code clean when you can define the rules as you go. üö®</p> <h3 id="add-everything-in-one-file">Add everything in one file</h3> <p>Just put everything in one file, so you don‚Äôt need to create many different files and components and can have 1000s of lines in one file. The compilation build time will also be very small if you use just a single file! üôà</p> <h3 id="write-duplicate-code">Write duplicate code</h3> <p>Why reuse variables, and components when you can copy-paste the same code over and over again and if you need to change one small thing then spend a ton of time adjusting it everywhere. So productivity++ üòå</p> <h3 id="have-unused-importsvariables-everywhere">Have unused imports/variables everywhere</h3> <p>Why care to delete the unused variables and import them when they can stay where they are and increase your app bundle size. üìà</p> <h3 id="prop-drilling">Prop drilling</h3> <p>Just keep passing props 10 components deep because who wants to use a tool to manage state properly ü•±.</p> <h3 id="not-destructure-objects">Not destructure objects</h3> <p>Who cares about destructuring objects, keep doing <code class="language-plaintext highlighter-rouge">{object.a}</code>, <code class="language-plaintext highlighter-rouge">{object.b}</code> everywhere. üßê</p> <h3 id="not-using-typescript">Not using typescript</h3> <p>Who needs to use typescript when you can pass a number for <code class="language-plaintext highlighter-rouge">name</code> somewhere and string for the same variable somewhere ü§∑‚Äç‚ôÇÔ∏è</p> <h3 id="not-using-enums">Not using enums</h3> <p>Who doesn‚Äôt love typos!? Why use enums when you can make a typo and mess up your entire code base and pull your hair for 2 days to find the error after breaking production ü§°</p> <h3 id="use-random-names-for-functions-variables-components">Use random names for functions, variables, components</h3> <p>Why waste time thinking about a great function/variable/component name, use a random name and save time. üï∞</p> <h2 id="conclusion">Conclusion</h2> <p>I hope you were able to understand how not to write clean code, now it is up to you to choose if you wanna write good code or bad code! That‚Äôs it for this one ‚úåÔ∏è</p> <h3 id="useful-links">Useful links</h3> <p><a href="https://blog.avneesh.tech/how-to-not-become-a-better-developer">How to not become a better developer</a></p> <p><a href="https://links.avneesh.tech/">Connect with me</a></p>]]></content><author><name>Avneesh Agarwal</name></author><category term="web"/><category term="react"/><category term="web-development"/><category term="javascript"/><summary type="html"><![CDATA[A few ways to *not* clean code and maintainable in React!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/76690419/174092726-03b0760f-1385-45f9-9680-9c617ff3adef.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/76690419/174092726-03b0760f-1385-45f9-9680-9c617ff3adef.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Genics Log #2: Sponsorship from Vercel, Theme updates, Organic Growth and more</title><link href="https://genicsblog.com/genics-log-2" rel="alternate" type="text/html" title="Genics Log #2: Sponsorship from Vercel, Theme updates, Organic Growth and more"/><published>2022-06-17T00:00:00+00:00</published><updated>2022-06-17T00:00:00+00:00</updated><id>https://genicsblog.com/genics-log-2</id><content type="html" xml:base="https://genicsblog.com/genics-log-2"><![CDATA[<p>Welcome to the second issue in the <a href="/category/genics-log">Genics log</a> series! I know this is super late in the month, but I wanted to share some updates on the blog from the past months.</p> <p>Before diving into the latest news at Genics, I would like to introduce myself. I am <a href="/author/gouravkhunger/">Gourav Khunger</a>, the founder of <a href="/">Genics Blog</a>. I am a teenager from India who is passionate about software development and <a href="/tag/open-source/">open source</a>.</p> <p>In the <a href="/genics-log-1">last article</a> in this series, we talked about how we went open source and how we managed to grow from 200 visitors/month to 500+ visitors/month, along with sponsorship from <a href="https://beyondwords.io/?utm_source=genicsblog.com&amp;utm_medium=cpc&amp;utm_campaign=advertisement">BeyondWords</a>.</p> <p>This log is more inclined towards the core theme infrastructure and how we managed to grow our community to 600+ readers now.</p> <p>Let‚Äôs get started!</p> <h2 id="staging-envs-with-vercel">Staging ENVs with Vercel</h2> <p>This was a crucial step in forming a better infrastructure for building <a href="https://github.com/genicsblog/theme-files">the theme</a> and its plugins.</p> <h3 id="previous-setup">Previous setup</h3> <p>From the beginning itself, I planned to create a separate repository for the theme just because it would allow us to use a separate GitHub Pages for <a href="https://staging.genicsblog.com">staging.genicsblog.com</a>.</p> <p><a href="https://github.com/genicsblog/theme-files/blob/aa7944b1943dbb7206b013dcc1d8102f8c48875e/.github/workflows/setup-staging.yml">This</a> was the GitHub Actions file that deployed the theme to staging url. We made sure to block indexing using the <code class="language-plaintext highlighter-rouge">robots.txt</code> file‚Äôs <code class="language-plaintext highlighter-rouge">Disallow: /</code> directive.</p> <p>But here comes the tricky part - the staging was not relevant until we were able to deploy PRs to preview them. Staging environment for approved and merged PRs didn‚Äôt matter as much as environment for previewing the pending PRs.</p> <p>A huge problem was that we couldn‚Äôt use repository secret variables in GitHub Actions if it ran using <code class="language-plaintext highlighter-rouge">pull_request</code> event but those variables are needed to deploy to gh-pages.</p> <p>For that, we had to use <code class="language-plaintext highlighter-rouge">pull_request_target</code> event trigger which allows PR actions to use the repository secrets to access the staging environment.</p> <p>But the catch here is, this comes with <strong>security vulnerabilities</strong> as the PRs are run in the context of the repository base and not the PR base.</p> <p>This could mean that user can manipulate the workflow file to misuse the repository secrets!</p> <h3 id="vulnerability-in-main-repository">Vulnerability in main repository</h3> <p>The above mentioned issue was actually present in the main repository. I had setup a workflow for PRs using <code class="language-plaintext highlighter-rouge">pull_request_target</code> because I wanted to automerge ‚Äúcorrect‚Äù changes to drafts by authors.</p> <p>YES, this was a big mistake but fortunately, no one exploited this vulnerability using which one could clean up the whole repository in minutes (making a delete commit and managing to automerge it using repo secrets).</p> <p>I did have security measures in place:</p> <p>An <a href="https://github.com/genicsblog/genicsblog.com/blob/8f8d936e72d886af28ea232d6e90eaa1442c6518/.github/workflows/validate-drafts.yml#L57-L64">automerge</a> happened <a href="https://github.com/genicsblog/genicsblog.com/blob/8f8d936e72d886af28ea232d6e90eaa1442c6518/.github/workflows/validate-drafts.yml#L54">only if</a> the PR changes article files that are owned by the specific author. The <a href="https://github.com/genicsblog/theme-files/blob/aa7944b1943dbb7206b013dcc1d8102f8c48875e/_scripts/validate-drafts.py">python script</a> referenced takes in the list of files changed in the PR and goes through them to verify if the PR author is the actual author of the article files.</p> <p>Now, you could argue that a person could change the script in the PR and this check would easily be bypassed. That is the reason that the workflow uses <code class="language-plaintext highlighter-rouge">wget</code> to download the script from the main branch and then run it. It <a href="https://github.com/genicsblog/genicsblog.com/blob/8f8d936e72d886af28ea232d6e90eaa1442c6518/.github/workflows/validate-drafts.yml#L47-L48">deletes the scripts</a> in the PR and downloads the correct one before running.</p> <p>But again, I was still skeptical of the <code class="language-plaintext highlighter-rouge">pull_request_target</code> event trigger. The docs don‚Äôt clearly mention it, but I am not sure - If the action runs in context of the PR base, then is it possible that the author change the action script and bypasses the script download and other verification checks?</p> <p>This is the reason we now moved to Vercel to off-load all these security issues and still be able to deploy staging ENVs!</p> <h3 id="sponsorship-from-vercel">Sponsorship from Vercel</h3> <p><a href="https://vercel.com/?utm_source=genicsblog&amp;utm_campaign=oss" rel="dofollow">Vercel</a> was generous enough to sponsor our <a href="http://github.com/genicsblog/genicsblog.com">GitHub organization</a> to be able to deploy organization repositories for free!</p> <blockquote> <p>Vercel is a platform for frontend frameworks and static sites, built to integrate with your headless content, commerce, or database.</p> </blockquote> <p>This sponsorship now enables us to remove our vulnerable GitHub actions and migrate to Vercel deployments. It was as easy as setting up the installation and build scripts. Vercel automatically deploys all PRs to staging environments!</p> <p>Now we can easily preview pull requests and test them visually before moving them to production!</p> <h2 id="theme-updates">Theme updates</h2> <p>We have worked on massive improvements to the theme and its plugins!</p> <h3 id="paginating-author-pages-7">Paginating author pages (<a href="https://github.com/genicsblog/theme-files/issues/7">#7</a>)</h3> <p>This was by far the biggest need for the theme. Author pages <a href="/author/gouravkhunger/">like this</a> could get super big without pagination and that affects load times a lot.</p> <p>This was a big problem for the Jekyll community as well - there was no plugin to handle multiple authors with ease.</p> <p>This lead me to spend time messing with <a href="https://github.com/sverrirs/jekyll-paginate-v2">jekyll-paginate-v2</a> and understanding how its pagination works. With some days of effort, I came up with <a href="https://github.com/gouravkhunger/jekyll-auto-authors">jekyll-auto-authors</a> which completely simplifies the process of paginating author pages!</p> <p>Here‚Äôs an <a href="https://genicsblog.com/gouravkhunger/adding-multiple-authors-to-a-jekyll-blog-got-easier#2-using-my-plugin-jekyll-auto-authors">in-depth tutorial</a> on using the plugin to paginate author pages.</p> <h3 id="shortcut-commands-10">Shortcut commands (<a href="https://github.com/genicsblog/theme-files/issues/10">#10</a>)</h3> <p>There are new shortcut commands you can use to perform these actions on the site:</p> <ul> <li>Opening up search bar: <code class="language-plaintext highlighter-rouge">command</code> + <code class="language-plaintext highlighter-rouge">K</code> or <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">K</code>. To close it please use the <code class="language-plaintext highlighter-rouge">Esc</code> key.</li> <li>Toggling the site theme: <code class="language-plaintext highlighter-rouge">command</code> + <code class="language-plaintext highlighter-rouge">shift</code> + <code class="language-plaintext highlighter-rouge">L</code> or <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">L</code>.</li> </ul> <h3 id="copy-button-for-code-blocks-1">Copy button for code blocks (<a href="https://github.com/genicsblog/theme-files/issues/1">#1</a>)</h3> <p>Copy buttons on code blocks have been given an overhaul and provide a much nicer user experience.</p> <h3 id="spam-comments">Spam comments</h3> <p>In light of <a href="https://github.com/genicsblog/comments/pull/122">recent spam abuse</a> of our commenting system, we have removed the comment system for now. We might use <a href="https://giscus.app">giscus</a> in future but there‚Äôs no plans for it right now.</p> <p>Please use our <a href="https://discord.genicsblog.com">Discord server</a> for discussions on articles on the site.</p> <h3 id="other-updates">Other updates</h3> <p>Here are some minor but relevant updates we‚Äôve made to the theme:</p> <ul> <li>More open-graph meta tags (<a href="https://github.com/genicsblog/theme-files/issues/39">#39</a>): better for SEO.</li> <li>Migration to GA4 (<a href="https://github.com/genicsblog/theme-files/issues/21">#21</a>).</li> <li>Selection color for code blocks (<a href="https://github.com/genicsblog/theme-files/issues/28">#28</a>).</li> <li>Refactoring series pages (<a href="https://github.com/genicsblog/theme-files/issues/2">#2</a>).</li> <li>For authors: tools like <a href="https://genicsblog.com/tool/frontmatter-generator">frontmatter generator</a> (<a href="https://github.com/genicsblog/genicsblog.com/issues/93">#93</a>) and <a href="https://genicsblog.com/tool/thumbnail-generator">thumbnail generator</a>.</li> <li>Licensing for the theme and articles (<a href="https://github.com/genicsblog/genicsblog.com/discussions/136">#136</a>).</li> </ul> <h2 id="stats">Stats</h2> <h3 id="open-source">Open Source</h3> <p>Here are the stats that changed from the last time:</p> <ul> <li><a href="https://github.com/genicsblog/genicsblog.com"><code class="language-plaintext highlighter-rouge">genicsblog.com</code></a> (Main repo with posts and data files): <strong>25 stars</strong>, <strong>20 forks</strong>.</li> <li><a href="https://github.com/genicsblog/theme-files"><code class="language-plaintext highlighter-rouge">theme-files</code></a> (Basically template files): <strong>7 stars</strong>, <strong>9 fork</strong>.</li> </ul> <h3 id="google-analytics">Google Analytics</h3> <p>Here are the recent 30-day stats from our Google Analytics:</p> <p><img src="https://user-images.githubusercontent.com/46792249/173242642-81e97597-073b-4068-b1ff-3fb0eac8633b.png" alt="Genics blog's past 30 days Google Analytics Stats"/></p> <p>Join our <a href="https://discord.genicsblog.com">Discord server</a> to view these public stats every day :)</p> <h3 id="organic-stats">Organic Stats</h3> <p>Almost 40-50% of our monthly traffic is through organic channels!</p> <p><img src="https://user-images.githubusercontent.com/46792249/173243091-49771902-7e9b-4eed-b37b-a911641ace8c.png" alt="Genics blog's past 3 month Google Search Console Stats"/></p> <h2 id="final-words">Final Words</h2> <p>It‚Äôs been an absolute rollercoaster ride for us to get to this point! It was from 100 readers a month in December when I decided to open source the blog and start working on a newer and better version of it. And here we are, scaled to 600+ readers within 3 months!</p> <p>In the near future, I plan to continue working on the improvements and scale to at least 5k readers per month. Up to that point, we will focus mainly on putting out quality content that people find insightful while focusing on gaining traffic through organic channels mainly.</p> <p>After the 5k checkpoint, there will be great things to come ;)</p> <p>Looking forward to your feedback and suggestions!</p>]]></content><author><name>Gourav Khunger</name></author><category term="genics-log"/><summary type="html"><![CDATA[Here's the issue #2 in the Genics log series containing all the latest news and updates on our blog's changes from the recent months!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/173225923-7d3a6fc7-d0f3-4b2c-8289-d18398f82f93.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/173225923-7d3a6fc7-d0f3-4b2c-8289-d18398f82f93.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Objects and Object Keys in JavaScript: The Definite Guide</title><link href="https://genicsblog.com/shockz/objects-and-object-keys-in-javascript-the-definite-guide" rel="alternate" type="text/html" title="Objects and Object Keys in JavaScript: The Definite Guide"/><published>2022-05-23T00:00:00+00:00</published><updated>2022-05-23T00:00:00+00:00</updated><id>https://genicsblog.com/shockz/objects-and-object-keys-in-javascript-the-definite-guide</id><content type="html" xml:base="https://genicsblog.com/shockz/objects-and-object-keys-in-javascript-the-definite-guide"><![CDATA[<h2 id="learn-about-object-keys-in-javascript">Learn about Object Keys in JavaScript</h2> <p>Have you ever wondered how to use object keys in JavaScript? If so, then here is a quick tutorial on how to use object keys in JavaScript. Do not worry if you don‚Äôt know anything about objects yet, this blog covers that as well!</p> <h2 id="what-are-javascript-objects">What are Javascript Objects?</h2> <p>Objects are one of the eight data types in javascript. They are used to store various kinds of complex data in a key-value collection pair.</p> <p>Here‚Äôs a simple example on how to create an empty object in JavaScript:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// same as above</span>
</code></pre></div></div> <p><img src="https://cdn.discordapp.com/attachments/939202528392921198/977942194751172628/unknown.png" alt="image"/></p> <h2 id="basic-objects"><strong>Basic Objects</strong></h2> <p>The Objects data structure stores data in key-value pairs. Each pair is called a ‚Äúproperty‚Äù of the object.</p> <p>A property is defined using the notation <code class="language-plaintext highlighter-rouge">key: value</code>. Here, the <code class="language-plaintext highlighter-rouge">value</code> can be any data type or even a javascript function (more on this later).</p> <p>Here‚Äôs a visual representation of an object:</p> <p><img src="https://media.discordapp.net/attachments/954717163808251924/976340109353975828/unknown.png" alt="image"/></p> <p>An Object is created using curly (<code class="language-plaintext highlighter-rouge">{}</code>) brackets and its properties and values are separated by a <code class="language-plaintext highlighter-rouge">,</code> inside.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// string property</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="c1">// number propery</span>
    <span class="na">isAdmin</span><span class="p">:</span> <span class="kc">true</span> <span class="c1">// boolean property</span>
<span class="p">};</span>
</code></pre></div></div> <h2 id="object-keys">Object Keys</h2> <p>Here in the above example, <code class="language-plaintext highlighter-rouge">obj</code> is the name of the object and it has 3 properties or <code class="language-plaintext highlighter-rouge">keys</code>: <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">age</code> and <code class="language-plaintext highlighter-rouge">isAdmin</code>.</p> <h2 id="object-values">Object Values</h2> <p>The object <code class="language-plaintext highlighter-rouge">obj</code> contains 3 keys and each of them stores some data known as <code class="language-plaintext highlighter-rouge">value</code>.</p> <h3 id="pro-tip">Pro Tip</h3> <p>You can even assign a function to a value in an object.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
    <span class="na">isAdmin</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">sayHi</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// executes the sayHi() function and alerts "Hello"</span>
</code></pre></div></div> <p>This comes in handy when you want to execute a function on similar kinds of objects when a certain event happens!</p> <p>Let‚Äôs get our hands dirty and look at how to define, access and modify data in an object using <strong>Dot Notation</strong> and <strong>Bracket Notation</strong> in JavaScript.</p> <h2 id="dot-notation-in-detail">Dot Notation in detail</h2> <p>As we have seen how to declare objects in javascript, how do you think objects are even a bit helpful if we can‚Äôt modify the data inside the objects at runtime?</p> <p>That‚Äôs where <strong>Dot Notation</strong> comes in. Let‚Äôs look at how we can access and modify data in an object using Dot Notation.</p> <h3 id="adding-a-key-to-a-javascript-object-at-runtime">Adding a key to a javascript object at runtime</h3> <p>Let‚Äôs look at how to add a new property to an object using the dot notation:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">newKey</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">newValue</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// add a new key-value pair to obj using dot notation</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">newKey</span><span class="p">);</span> <span class="c1">// outputs newValue</span>
</code></pre></div></div> <p>Here, we declare an empty object <code class="language-plaintext highlighter-rouge">obj</code> and then add a new key and value pair to the object using dot notation. It‚Äôs as simple as that!</p> <h3 id="deleting-a-key-with-dot-notation">Deleting a key with Dot Notation</h3> <p>You can delete a property of an object using the <code class="language-plaintext highlighter-rouge">delete</code> keyword:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">newKey</span><span class="p">;</span> <span class="c1">// now newKey doesn't exist in obj object</span>
</code></pre></div></div> <h3 id="checking-if-a-key-exists-with-dot-notation">Checking if a key exists with Dot Notation:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="dl">"</span><span class="s2">newKey</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">newKey exists</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Using this code, if the <code class="language-plaintext highlighter-rouge">newKey</code> key is present in <code class="language-plaintext highlighter-rouge">obj</code>, an alert saying ‚ÄúnewKey exists‚Äù would be shown.</p> <h2 id="bracket-notation">Bracket Notation</h2> <p><strong>Bracket Notation</strong> is another way to access and modify object properties but it is a bit different from Dot Notation.</p> <p>In Dot Notation, the keys we want to access/modify are known at the run time, but in Bracket Notation, they can be both static and dynamic.</p> <p>This means the keys can be loaded from another source to be used at runtime using the Bracket Notation.</p> <p>Now let‚Äôs see how to do different things with Bracket Notation.</p> <h3 id="accessing-a-keys-value-with-bracket-notation">Accessing a key‚Äôs value with Bracket Notation</h3> <p>You can define a string and pass in the string to the bracket notation to access the value of the key:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">lion</span><span class="p">:</span> <span class="dl">"</span><span class="s2">roar</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">dog</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bark</span><span class="dl">"</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">cat</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">lion</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">cat</span><span class="p">]);</span> <span class="c1">// outputs "roar"</span>
</code></pre></div></div> <h3 id="defining-a-key-and-value-with-bracket-notation">Defining a key and value with Bracket Notation</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">obj</span><span class="p">[</span><span class="dl">"</span><span class="s2">newKey</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">newValue</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="dl">"</span><span class="s2">newKey</span><span class="dl">"</span><span class="p">]);</span> <span class="c1">// newValue</span>
</code></pre></div></div> <p>The above code adds a new property named <code class="language-plaintext highlighter-rouge">newKey</code> with the value <code class="language-plaintext highlighter-rouge">newValue</code> to the object named <code class="language-plaintext highlighter-rouge">obj</code>.</p> <p>Later, you can access the value of the key like this:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">alert</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="dl">"</span><span class="s2">newKey</span><span class="dl">"</span><span class="p">]);</span>
</code></pre></div></div> <p>Let‚Äôs see one more example but with the access key being calculated at the runtime:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">boy</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Jeremy</span><span class="dl">"</span><span class="p">,</span>
    <span class="nx">age</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">69</span><span class="dl">"</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="dl">"</span><span class="s2">What do you want to know about boy?</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">boy</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
</code></pre></div></div> <p>As you can see accessing a key with bracket notation is a bit different than dot notation, but it is still a good way to access properties of objects the keys are dynamic.</p> <h3 id="deleting-a-key-with-bracket-notation">Deleting a key with Bracket Notation</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="dl">"</span><span class="s2">newKey</span><span class="dl">"</span><span class="p">];</span>
</code></pre></div></div> <p>With this, the property named <code class="language-plaintext highlighter-rouge">newKey</code> ceases to exist in the <code class="language-plaintext highlighter-rouge">obj</code> object.</p> <h3 id="check-if-a-key-exists-with-bracket-notation">Check if a key exists with Bracket Notation:</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="dl">"</span><span class="s2">newKey</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">newKey exists</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="computed-properties-in-square-brackets">Computed Properties in Square Brackets</h3> <p>While creating an object we can use square brackets</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="dl">"</span><span class="s2">What do you want to buy?</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">MacBook</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">products</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">[</span><span class="nx">prompt</span><span class="p">]:</span> <span class="mi">1000</span> <span class="c1">// the name of this property is taken from the variable prompt</span>
<span class="p">};</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">products</span><span class="p">.</span><span class="nx">MacBook</span><span class="p">)</span> <span class="c1">// 1000 if product = Macbook</span>
</code></pre></div></div> <p>The same thing can be achieved by the code below:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="dl">"</span><span class="s2">What do you want to buy</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">MacBook</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">products</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">products</span><span class="p">[</span><span class="nx">prompt</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>

<span class="nx">alert</span><span class="p">(</span><span class="nx">products</span><span class="p">.</span><span class="nx">MacBook</span><span class="p">)</span>
</code></pre></div></div> <p>Personally, I like Dot notation because it is easier to read and understand.</p> <h3 id="property-naming-limitations---no">Property Naming Limitations - NO!</h3> <p>As you know, in javascript and many other programming languages, a variable cannot have a name that is a reserved word like- <code class="language-plaintext highlighter-rouge">return</code>, <code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">const</code>, <code class="language-plaintext highlighter-rouge">let</code>, etc. But there is no such restriction like this in object property!</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">return</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="na">const</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="na">let</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="na">var</span><span class="p">:</span> <span class="mi">15</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="k">return</span><span class="p">);</span> <span class="c1">// outputs 2</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="kd">const</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">.</span><span class="kd">let</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">.</span><span class="kd">var</span><span class="p">);</span> <span class="c1">// outputs 30</span>
</code></pre></div></div> <blockquote> <h3 id="important-note">Important Note</h3> <p>When you use a number like <code class="language-plaintext highlighter-rouge">0</code> as a property key, it gets converted to a string that is <code class="language-plaintext highlighter-rouge">"0"</code>.</p> </blockquote> <h2 id="testing-if-a-property-in-an-object-exists-or-not">Testing if a Property in an object exists or not</h2> <p>If a property doesn‚Äôt exist in an object, it will return <code class="language-plaintext highlighter-rouge">undefined</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">abcd</span><span class="p">);</span> <span class="c1">//outputs undefined in the console</span>
</code></pre></div></div> <p>For making it easier, you can use the <strong>in</strong> notation to check if a property exists in an object as well:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">year</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">);</span> <span class="c1">//outputs false, year key doesn't exist in the object obj</span>
</code></pre></div></div> <h2 id="the-for--in--loop">The <code class="language-plaintext highlighter-rouge">for ... in ...</code> loop</h2> <p>To loop over all keys/properties of an object, there exists a special kind of <code class="language-plaintext highlighter-rouge">for</code> loop:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">};</span>

<span class="k">for</span><span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="c1">//will log name and age</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span> <span class="c1">//will log John and 30</span>
<span class="p">}</span>
</code></pre></div></div> <blockquote> <h3 id="note">Note</h3> <p>These are not ordered in the same order we wrote them in the object, there exists a special order.</p> <p>For example, integer properties are according to their value in ascending order:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="mi">30</span><span class="p">:</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">,</span>
    <span class="mi">69</span><span class="p">:</span> <span class="dl">"</span><span class="s2">okay</span><span class="dl">"</span><span class="p">,</span>
    <span class="mi">42</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bye</span><span class="dl">"</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="c1">// logs 30, 42, 69</span>
<span class="p">}</span>
</code></pre></div> </div> <p>Non-Integer Properties are logged in the order they are added to the object.</p> </blockquote> <h2 id="useful-information">Useful Information</h2> <p>You can use the <code class="language-plaintext highlighter-rouge">Object.keys()</code> method to get the names of all the keys in an object:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</code></pre></div></div> <p>This logs an <code class="language-plaintext highlighter-rouge">Array</code> which contains the strings <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">age</code> to the console.</p> <h2 id="conclusion">Conclusion</h2> <p>In this tutorial, we learned about javascript objects, keys, Dot and Bracket Notation and many other useful things.</p> <p>You can use all these things in your future projects according to your preference.</p> <p>I hope you liked this tutorial. Do share it with your friends who are exploring and learning javascript!</p>]]></content><author><name>Rohit Mishra</name></author><category term="web"/><category term="beginners"/><category term="javascript"/><category term="web-development"/><summary type="html"><![CDATA[The complete beginner's guide to objects and object keys in javascript for web development.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/169762706-0a457425-f5e5-49a9-9888-d963b8ba26c7.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/169762706-0a457425-f5e5-49a9-9888-d963b8ba26c7.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Sessions vs JWTs - A Complete Guide to Authentication</title><link href="https://genicsblog.com/dhruva/sessions-vs-jwts-a-complete-guide-to-authentication" rel="alternate" type="text/html" title="Sessions vs JWTs - A Complete Guide to Authentication"/><published>2022-05-14T00:00:00+00:00</published><updated>2022-05-14T00:00:00+00:00</updated><id>https://genicsblog.com/dhruva/sessions-vs-jwts-a-complete-guide-to-authentication</id><content type="html" xml:base="https://genicsblog.com/dhruva/sessions-vs-jwts-a-complete-guide-to-authentication"><![CDATA[<p>Hello, in this post I will go over authentication, various methods to implement it, each of their drawbacks, and which one you may want to use! Let‚Äôs get started!</p> <h2 id="what-is-authentication">What is Authentication?</h2> <p>Authentication or auth for short is the process where a server recognizes <strong>the identity of a user</strong>. Authorization is then done, to allocate a role to the authenticated user and allocate the required services to that particular user.</p> <p>There are 2 ways you can implement auth:</p> <ul> <li>Sessions</li> <li>JSON Web Tokens</li> </ul> <p>Let‚Äôs take a deep dive into sessions!</p> <h2 id="sessions">Sessions</h2> <p>Server-side sessions were the traditional way to implement auth. The flow of a session can be illustrated like this:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652199081833/Xut5oskzV.png" alt="image.png"/></p> <p>The process begins with the client:</p> <ul> <li>Receiving an e-mail and a password</li> <li>Then, hashing the password</li> <li>And sending the e-mail and the hashed password to the server</li> </ul> <p>Hashing is the process of <strong>scrambling</strong> a value using a key that is sent to an algorithm. <strong>Hashed values can‚Äôt be decrypted!</strong> <a href="https://argon2.online">Argon2</a> is an extremely secure hashing algorithm that can be used to hash passwords.</p> <p>While validating the credentials, the server hashes the given password, and the hash stored in the database (during register) and compares both of them. If the hashes match, the server then sends a request to the <strong>session store</strong> for the session ID.</p> <p>A session store is a medium where data related to the logged-in user is stored. It could be in memory or a database. <a href="https://redis.com">Redis</a> is commonly used as a session store because of its speed.</p> <p>The session data contains anything linked to the user who is logged in. It could be the <code class="language-plaintext highlighter-rouge">userId</code> or any field that is unique to the user.</p> <p>This session ID is then sent back to the server, which in turn, sends the ID of the session to the client in the form of a <strong>cookie</strong>. Data on the user can then be accessed using this session ID which the store can query.</p> <p>To log the user out, you can destroy the cookie and delete the key-value pair associated with the session ID in the store.</p> <p>Now let‚Äôs take a look at JSON Web Tokens.</p> <h2 id="json-web-tokens-jwts">JSON Web Tokens (JWTs)</h2> <p>JWTs take a completely different approach to solving the problem. Authentication is done on the <strong>client-side</strong> here, rather than in the <strong>server</strong> like in sessions. The process can be illustrated in this way:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1652256338392/ET6Zrh480.png" alt="image.png"/></p> <p>It begins the same way as in sessions, but instead of asking the session store for a session ID, the server issues a <strong>JWT access token</strong> with a JWT Secret.</p> <p>This token is relayed back to the client and should ideally be stored in a cookie. The JWT is not <strong>private</strong> and it should <strong>NOT</strong> contain private information like the hashed password. A token should just contain the user ID or other types of unique, non-jeopardizing data.</p> <p>The JWT can then be used as an <strong>Authorization Header‚Äôs Bearer Token</strong> that can be used to run queries that require auth. This JWT can be validated in the server during requests. Since the secret remains private a JWT cannot be forged. To log a user out, the cookie can be destroyed.</p> <p>To keep the app secure, JWT tokens should be short-lived. Another token called a <strong>refresh token</strong> should be signed on login, which can renew the access token when it expires. When a client sends a request with an expired access token, the server would use the given refresh token and use it to generate a new access token. This way, if an attacker gets hold of an access token, the validity of that token is very short.</p> <blockquote> <p><strong>Note: Do NOT store JWTs in localStorage!</strong></p> </blockquote> <p>Storing JWTs in <code class="language-plaintext highlighter-rouge">localStorage</code> can make the app vulnerable to what‚Äôs known as an <strong>XSS Attack (Cross-Site Scripting)</strong>.</p> <p>It is a type of code injection where malicious code is injected into a website using another web application.</p> <h2 id="pros-and-cons-of-using-sessions">Pros and Cons of using Sessions</h2> <h3 id="more-controlflexibility">More Control/Flexibility</h3> <p>Sessions give the developer more control over the app. If there is a breach, then you can immediately delete the session from the store, whereas blacklisting JWTs is tricky, and in the worst-case scenario, you would just have to wait for the token to expire.</p> <h3 id="easy-to-implement">Easy to Implement</h3> <p>Since session IDs are stored in cookies, there is no need to provide any request headers. This is because cookies are supported automatically by browsers and all cookies are sent as part of the request to all websites.</p> <p>It also reduces bandwidth usage when compared to JWT, since there is no need to send the token back and forth for every request made by the client. Cookies can also introduce a vulnerability for <strong>CSRF (Cross-Site Request Forgery) attacks</strong>.</p> <p>This happens when requests through a malicious site force authenticated users on other websites to submit a request to the malicious website and get access to their credentials. This can be prevented by setting the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite"><code class="language-plaintext highlighter-rouge">SameSite</code></a> cookie option to <strong>lax</strong>.</p> <p>SameSite decides if the cookie should be sent only to the origin website.</p> <h3 id="security">Security</h3> <p>Session stores are not public and are stored remotely on a server, hence rendering the session data to be safe. In the case of JWTs, the tokens are relayed on every request and can be intercepted. Sessions are, in most cases, safer than using JWTs</p> <h3 id="scalability-issues">Scalability Issues</h3> <p>Sessions can be a pain to scale because there is a requirement for a place to host the session store. You will need to store more data on the store when more users authenticate and this will take a load on the server which can be expensive depending on what hosting solution you go with.</p> <h2 id="pros-and-cons-of-using-jwts">Pros and Cons of using JWTs</h2> <h3 id="scalable">Scalable</h3> <p>Since JWTs store nothing on the server, it is stateless and scalable. As the user base grows, JWTs can scale since there is no overhead of requiring a store on the server.</p> <h3 id="you-can-not-worry-about-a-lot-of-stuff">You can ‚Äúnot-worry‚Äù about a lot of stuff</h3> <ul> <li><strong>CORS</strong>: Cross-Origin Resource Sharing</li> <li>Domain Migration</li> <li>Portability: With sessions, you need a cookie store that only browsers have. You can use tokens while making clients for other devices too. But then you would have to resort to a different place to store the token on the client.</li> </ul> <h3 id="you-cant-truly-log-a-user-out">You can‚Äôt truly log a user out</h3> <p>You‚Äôd normally log a user out by removing the cookie with the access token in it. But this doesn‚Äôt ensure the <strong>validity of the access token</strong>. If an attacker gets hold of the token, he/she can still make requests to the server and do bad stuff.</p> <p>To prevent such things, you have to implement a blacklist system, where if you get a report of a stolen token, you add that token to a blacklist, and any request with a blacklisted token will be blocked.</p> <p>Simply removing the token from the hands of the client doesn‚Äôt solve the problem. You could introduce a refresh token, but then again that‚Äôs another token to deal with ;)</p> <h3 id="they-are-heavy">They are heavy</h3> <p>If you store a lot of junk on your token, you may exceed the size limit for a cookie. And I already told you why storing them on <code class="language-plaintext highlighter-rouge">localStorage</code> is probably a bad idea.. (CSRF <em>wink, wink</em>)</p> <h3 id="security-1">Security</h3> <p>JWTs are simply put, <em>not</em> secure. They can easily be intercepted and decrypted (Literally all you have to do is paste the token into a site like <a href="https://jwt.io">this</a> and you can get the user data inside it). This is exactly why you should never store any sensitive data in a token.</p> <p>Just store the required credentials that will allow the server to know who the user is. Something simple like a <code class="language-plaintext highlighter-rouge">userId</code>.</p> <h2 id="which-one-should-you-use">Which one should you use?</h2> <p>It‚Äôs all your choice. I prefer to use sessions since they are easy to implement (I don‚Äôt have to worry about refresh tokens, blacklists, etc.) and are more secure (only the session ID is sent through an HTTP-Only, SameSite cookie).</p> <p>I don‚Äôt find scalability to be an issue, especially with platforms like <a href="https://railway.app">Railway</a> providing a good free plan (not sponsored!). If you have a large user base, and you are willing to spend a bit of money on a VPS or a paid cloud service, definitely go with sessions.</p> <p>Before I wrap up, here‚Äôs a list of resources that can help you with implementing auth and going a bit deeper into the topics discussed in this article.</p> <h2 id="resources">Resources</h2> <ul> <li><a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/">Stop using JWT for sessions</a></li> <li><a href="https://www.youtube.com/watch?v=o9hT7v0OLJc">JWT vs Cookies for Authentication</a></li> <li><a href="https://www.loginradius.com/blog/engineering/guest-post/jwt-vs-sessions/">How to Authenticate Users: JWT vs. Session</a></li> <li><a href="https://www.npmjs.com/package//argon2">argon2 npm</a></li> <li><a href="https://www.npmjs.com/package/express-session">express session middleware</a></li> <li><a href="https://www.npmjs.com/package/connect-redis">redis session storage for express</a></li> <li><a href="https://www.npmjs.com/package/express-jwt">express-jwt</a></li> <li><a href="https://www.passportjs.org/">passport-js</a></li> <li><a href="https://www.jamesqquick.com/blog/the-easiest-way-to-add-node-js-user-authentication">The Easiest Way to Add Node.js User Authentication: James Q Quick</a></li> <li><a href="https://owasp.org/www-community/attacks/xss/">XSS Attacks</a></li> <li><a href="https://portswigger.net/web-security/csrf">CSRF Attacks and how to prevent them</a></li> </ul> <p>And that‚Äôs it for this post, see you on the next one!</p>]]></content><author><name>Dhruva Srinivas</name></author><category term="backend"/><category term="authentication"/><category term="web-development"/><category term="security"/><summary type="html"><![CDATA[Authentication or auth for short is the process where a server recognizes the identity of a user. This post goes over the methods for implementing authentication, each of their drawbacks, and which one you may want to choose.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1652269876694/PfE5eFaEj.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1652269876694/PfE5eFaEj.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Kotlin: Multi-dimensional (2D, 3D, etc.) Array Initialization</title><link href="https://genicsblog.com/gouravkhunger/kotlin-multi-dimensional-2d-3d-etc-array-initialization" rel="alternate" type="text/html" title="Kotlin: Multi-dimensional (2D, 3D, etc.) Array Initialization"/><published>2022-05-05T00:00:00+00:00</published><updated>2022-05-05T00:00:00+00:00</updated><id>https://genicsblog.com/gouravkhunger/kotlin-multi-dimensional-2d-3d-etc-array-initialization</id><content type="html" xml:base="https://genicsblog.com/gouravkhunger/kotlin-multi-dimensional-2d-3d-etc-array-initialization"><![CDATA[<p>At some point of time, we all have worked with arrays. It is a useful data structure to store multiple values of the same type in a single variable. Complex usage of arrays includes storing data in 2D, 3D, or other multidimensional arrays. This allows us to represent things like matrices, grids, and cubes effectively.</p> <p>In this tutorial, we will specifically focus on declaring, initializing and using 2D, 3D, and other multidimensional arrays in the Kotlin programming language.</p> <h2 id="1d-arrays-in-kotlin">1D Arrays in Kotlin</h2> <h3 id="1d-arrays-with-pre-defined-data">1D Arrays with pre-defined data</h3> <p>Simple 1D arrays in kotlin are declared using the <code class="language-plaintext highlighter-rouge">arrayOf()</code> standard library function. It takes a list of values as an argument and returns a 1D array.</p> <p>Here‚Äôs an example:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">array</span> <span class="p">=</span> <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div></div> <p>This creates an array of Integer values with 5 elements: <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">2</code>, <code class="language-plaintext highlighter-rouge">3</code>, <code class="language-plaintext highlighter-rouge">4</code>, <code class="language-plaintext highlighter-rouge">5</code>.</p> <p>Type declaration is optional for <code class="language-plaintext highlighter-rouge">arrayOf()</code> and this makes the array flexible. If array type isn‚Äôt defined then you can store any kind of elements in the array. For example, you can use:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">array</span> <span class="p">=</span> <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"two"</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="k">true</span><span class="p">)</span>
</code></pre></div></div> <p>and it would work perfectly fine. You can verify this by iterating over the array and printing the values:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"$i is of type ${i::class.simpleName}"</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*
Output:

1 is of type Int
two is of type String
3.0 is of type Double
true is of type Boolean
*/</span>
</code></pre></div></div> <p>But this defeats the purpose of type-safety in Kotlin. We would not want to store a string in an array of integers. To guarantee type-safety, we declare the type of the array during initialization so that the elements of the array are ensured to be of the same type. Otherwise, they would throw an error.</p> <p>To declare a type-safe 1D array in kotlin, we use <code class="language-plaintext highlighter-rouge">arrayOf&lt;T&gt;()</code> function where <code class="language-plaintext highlighter-rouge">T</code> is the type of the elements in the array.</p> <p>For example, to declare a type-safe 1D array of integers, we use <code class="language-plaintext highlighter-rouge">arrayOf&lt;Int&gt;()</code>:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">array</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</code></pre></div></div> <p>If you try to add a string to the type-safe Int array, you will get an error:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">array</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="s">"40"</span><span class="p">)</span>

<span class="cm">/*
Doesn't even compile, error:

Type mismatch: inferred type is String but Int was expected
*/</span>
</code></pre></div></div> <p>It is pretty useful if you want to store data that is strongly typed.</p> <blockquote> <h3 id="fun-fact">Fun Fact</h3> <p>Kotlin standard library supports for functions like <code class="language-plaintext highlighter-rouge">intArrayOf()</code>, <code class="language-plaintext highlighter-rouge">doubleArrayOf()</code>, <code class="language-plaintext highlighter-rouge">booleanArrayOf()</code>, etc. to declare strongly typed arrays.</p> </blockquote> <h3 id="1d-arrays-with-dynamic-size">1D arrays with dynamic size</h3> <p>For lists of dynamic size, we use the function <code class="language-plaintext highlighter-rouge">mutableListOf()</code>. It works similar to <code class="language-plaintext highlighter-rouge">arrayOf()</code>, but provides us functions to perform actions on the list. Using them, we can add, remove, or modify the elements in the list without re-creating it!</p> <p><strong>Note</strong>: Unlike <code class="language-plaintext highlighter-rouge">arrayOf()</code>, once <code class="language-plaintext highlighter-rouge">mutableListOf()</code> automatically infers a single data type, you can‚Äôt change the data type of the list. To explicitly allow for it, use <code class="language-plaintext highlighter-rouge">mutableListOf&lt;Any&gt;()</code> to add mixed data types to the list. If you pass in multiple data types in the constructor, the list will automatically be of type <code class="language-plaintext highlighter-rouge">Any</code>.</p> <p><code class="language-plaintext highlighter-rouge">mutableListOf&lt;T&gt;()</code> allows us to manually define type-safe lists.</p> <p>Here are examples to declare a type-safe mutable lists with various examples:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">list2</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span> <span class="c1">// Type is inferred as Int, similar to mutableListOf&lt;Int&gt;()</span>
<span class="n">list2</span> <span class="p">+=</span> <span class="s">"test"</span> <span class="c1">// Error, can't add a string to an Int list</span>

<span class="kd">val</span> <span class="py">list2</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="s">"hehe"</span><span class="p">)</span> <span class="c1">// Type is inferred as Any because of multiple data types</span>
<span class="n">list2</span> <span class="p">+=</span> <span class="mi">100</span> <span class="c1">// Works fine</span>

<span class="kd">val</span> <span class="py">list3</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="nc">Any</span><span class="p">&gt;()</span> <span class="c1">// Type is explicitly set to Any</span>
<span class="n">list3</span> <span class="p">+=</span> <span class="mi">10</span> <span class="c1">// Works fine</span>
<span class="n">list3</span> <span class="p">+=</span> <span class="s">"test"</span> <span class="c1">// That's okay too :D</span>
<span class="n">list3</span> <span class="p">+=</span> <span class="k">true</span> <span class="c1">// All good!</span>
</code></pre></div></div> <p>Using the data present inside arrays and lists is fairly easy:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// The below code works for both lists and arrays</span>

<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="n">listOrArray</span><span class="p">.</span><span class="n">indices</span><span class="p">)</span> <span class="p">{</span> 
    <span class="c1">// indices is a built-in function that returns the range of indices of the list</span>
    <span class="c1">// now you can use listOrArray[i] to access the elements</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"${listOrArray[i]} "</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// You can also use listOrArray[number] to access the element at the given index.</span>
</code></pre></div></div> <blockquote> <h3 id="more-kotlin-knowledge">More kotlin knowledge</h3> <p>Mutable lists provide a lot more functions: <code class="language-plaintext highlighter-rouge">get()</code>, <code class="language-plaintext highlighter-rouge">set()</code>, <code class="language-plaintext highlighter-rouge">plus</code>, <code class="language-plaintext highlighter-rouge">minus()</code>, etc. to modify the list.</p> </blockquote> <p>Now, let‚Äôs look at 2D array initialization and usage examples in kotlin!</p> <h2 id="2d-arrays-in-kotlin">2D Arrays in Kotlin</h2> <p>2D arrays are a convenient way to store grid/board/matrix type of data.</p> <p>If we dig deep into Kotlin Standard Library, the function <code class="language-plaintext highlighter-rouge">arrayOf()</code> is actually returning <code class="language-plaintext highlighter-rouge">Array&lt;T&gt;</code> where <code class="language-plaintext highlighter-rouge">T</code> is the type of the elements in the array. This effectively means that if we pass in <code class="language-plaintext highlighter-rouge">T</code> we get out an array <code class="language-plaintext highlighter-rouge">Array&lt;T&gt;</code>.</p> <p>This means if we pass in <code class="language-plaintext highlighter-rouge">arrayOf()</code> into the <code class="language-plaintext highlighter-rouge">arrayOf()</code> function, we effectively get out <code class="language-plaintext highlighter-rouge">Array&lt;Array&lt;T&gt;&gt;</code> and that is exactly the representation of 2D Arrays!</p> <h3 id="2d-arrays-with-pre-defined-data">2D Arrays with pre-defined data</h3> <p>Let‚Äôs see how to make 2D arrays with predefined values:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">array</span> <span class="p">=</span> <span class="nf">arrayOf</span><span class="p">(</span>
    <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
    <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div> <p>This creates a 2D Kotlin array which is a collection of 1D Kotlin arrays. Here‚Äôs a representation of the array:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>General Form:
[[1 2 3], [4,5,6], [7,8,9]]

As a matrix:
1 2 3
4 5 6
7 8 9
</code></pre></div></div> <p>Again, these arrays are not type-safe. You can add another data type to the array without any issue. To make it type-safe, we need to declare the type of the array during initialization:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">array</span> <span class="p">=</span> <span class="n">arrayOf</span><span class="p">&lt;</span><span class="nc">Array</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;&gt;(</span> <span class="c1">// Declaring the type gives error if data types are mixed</span>
    <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
    <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="s">"this string will give error"</span><span class="p">),</span>
    <span class="nf">arrayOf</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div> <h3 id="2d-arrays-with-dynamic-size">2D arrays with dynamic size</h3> <p>To create 2D lists where we don‚Äôt have a fixed known size, we use <code class="language-plaintext highlighter-rouge">mutableListOf&lt;MutableList&lt;T&gt;&gt;()</code> declaration where <code class="language-plaintext highlighter-rouge">T</code> is the data type we expect the inner lists to hold. We don‚Äôt pass any initial value because the array will be populated using some logic later.</p> <p>Let‚Äôs look at it in action:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">list</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;&gt;()</span>

<span class="c1">// The elements within the inner lists can be anything, the numbers below are just an example.</span>

<span class="c1">// `repeat()` takes in a number and iterates from 0 to number-1</span>
<span class="nf">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// `row` is a new row in the array</span>
    <span class="kd">val</span> <span class="py">row</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;()</span>

    <span class="nf">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span> <span class="n">col</span> <span class="p">-&gt;</span> <span class="c1">// `col` is a new column in the row, ranges from 0 to 3</span>
        <span class="n">row</span> <span class="p">+=</span> <span class="n">col</span>
    <span class="p">}</span>

    <span class="c1">// Append the row to the array, can also use the `add()` function</span>
    <span class="n">list</span> <span class="p">+=</span> <span class="n">row</span>
<span class="p">}</span>

<span class="c1">// for each list in the list, print its element in matrix form</span>
<span class="k">for</span><span class="p">(</span><span class="n">sublist</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="k">in</span> <span class="n">sublist</span><span class="p">.</span><span class="n">indices</span><span class="p">){</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"$j "</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nf">println</span><span class="p">()</span> <span class="c1">// new line after each row</span>
<span class="p">}</span>

<span class="cm">/*
You can also access particular elements like:
list[0][0] -&gt; First element of the first row
or
list.get(0).get(0) -&gt; Same as above
*/</span>
</code></pre></div></div> <p>This code outputs the following:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 1 2 3 
0 1 2 3 
0 1 2 3 
0 1 2 3
</code></pre></div></div> <p>And hence we can create dynamic lists in kotlin as per our needs.</p> <h2 id="n-dimensional-arrays-in-kotlin">N-Dimensional Arrays in Kotlin</h2> <p>Using the approaches discussed above, it wouldn‚Äôt be hard to create 3D, 4D or even more dimensional arrays.</p> <p>If the dataset you have is known, you can use the <code class="language-plaintext highlighter-rouge">arrayOf()</code> function, or to have variable array data, you can go ahead with <code class="language-plaintext highlighter-rouge">mutableListOf()</code> functions to create the arrays.</p> <h2 id="conclusion">Conclusion</h2> <p>In this tutorial you learned about the arrays and mutable lists in kotlin using <code class="language-plaintext highlighter-rouge">arrayOf()</code> and <code class="language-plaintext highlighter-rouge">mutableListOf()</code> functions.</p> <p>These functions help you to create arrays and lists of any data type in Kotlin, to store values and perform actions based on that data.</p> <p>I hope you find this tutorial useful. Share it with your friends who are beginning with kotlin!</p>]]></content><author><name>Gourav Khunger</name></author><category term="coding"/><category term="kotlin"/><category term="beginners"/><summary type="html"><![CDATA[This concise tutorial explains how to declare and initialize 2D, 3D, and other multidimensional arrays in Kotlin programming language.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/166893523-b49fc45f-e356-45a9-a545-ac0086aa98a5.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/166893523-b49fc45f-e356-45a9-a545-ac0086aa98a5.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Pagination in Android Room Database using the Paging 3 Library</title><link href="https://genicsblog.com/gouravkhunger/pagination-in-android-room-database-using-the-paging-3-library" rel="alternate" type="text/html" title="Pagination in Android Room Database using the Paging 3 Library"/><published>2022-04-24T00:00:00+00:00</published><updated>2022-04-24T00:00:00+00:00</updated><id>https://genicsblog.com/gouravkhunger/pagination-in-android-room-database-using-the-paging-3-library</id><content type="html" xml:base="https://genicsblog.com/gouravkhunger/pagination-in-android-room-database-using-the-paging-3-library"><![CDATA[<p>The <a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview">Paging 3 library</a>, a part the new set of <a href="https://developer.android.com/jetpack">Android Jetpack</a> libraries, provides a robust way of paginating large sets of data in Android whether it is loaded from a room database or from a network layer.</p> <p>The library provides 3 different utilities for loading paginated data:</p> <ul> <li>Solely from a local Room DB.</li> <li>Solely from a webservice.</li> <li>From a webservice while storing it in a Room Database for offline use (combination of the above).</li> </ul> <p>In this tutorial, we will focus on implementing pagination only for a <strong>local Room Databases using Paging 3</strong>.</p> <p>If you are interested in just the code for the project, please check out this <a href="https://github.com/gouravkhunger/room-paging3-demo">GitHub repository</a>.</p> <h1 id="prerequisites">Prerequisites</h1> <h2 id="what-is-pagination">What is pagination?</h2> <p>Pagination is a way of breaking down huge pieces of data into smaller chunks and serving them one at a time. This improves the user experience as the entirety of the data doesn‚Äôt need to be loaded all at once. As soon as the user scrolls to the bottom of the screen, the next page of data is loaded.</p> <h2 id="what-are-we-building">What are we building?</h2> <p>Throughout this tutorial, we will implement pagination for a large dataset of texts stored in a Room Database in an Android app.</p> <p>We will build a basic application which shows a list of items in a RecyclerView using Paging 3. The data is loaded with a delay of 1 second to simulate data being loaded (for demo purpose only).</p> <p>There will be a progress bar at the end of the RecyclerView.</p> <p>Here‚Äôs a short demo of the app:</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/D-vw0ITD9Ww" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <h2 id="expected-knowledge">Expected knowledge</h2> <p>This tutorial expects you to have intermediate level knowledge in Android app development. You should have a basic understanding of the concepts of <strong>Room Databases</strong>, <strong>RecyclerView</strong> and how to use them although I will explain what‚Äôs going on in brief.</p> <p>You are not expected to have any knowledge of Paging 3!</p> <h2 id="setup">Setup</h2> <p>We will be using an Empty Activity as a starter project. If you don‚Äôt know how to create a new Android studio project, do read <a href="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio">this article</a>.</p> <p>The package name I have for my app is <code class="language-plaintext highlighter-rouge">com.example.paginationdemo</code>.</p> <p>Next, we need some dependencies in our app to use the libraries we need. Open <strong><code class="language-plaintext highlighter-rouge">app/build.gradle</code></strong> file and add these lines to the <code class="language-plaintext highlighter-rouge">dependencies</code> and <code class="language-plaintext highlighter-rouge">plugins</code> block:</p> <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span> <span class="o">{</span>
    <span class="c1">// ...other plugins</span>
    <span class="n">id</span> <span class="s1">'kotlin-kapt'</span>
<span class="o">}</span>

<span class="n">dependencies</span> <span class="o">{</span>
    <span class="c1">// ...other dependencies</span>

    <span class="n">implementation</span> <span class="s2">"androidx.paging:paging-runtime:3.1.1"</span>

    <span class="n">implementation</span> <span class="s2">"androidx.core:core-ktx:1.7.0"</span>
    <span class="n">implementation</span> <span class="s1">'androidx.activity:activity-ktx:1.4.0'</span>

    <span class="n">implementation</span> <span class="s2">"androidx.room:room-ktx:2.4.2"</span>
    <span class="n">kapt</span> <span class="s2">"androidx.room:room-compiler:2.4.2"</span>
<span class="o">}</span>
</code></pre></div></div> <p>Also enable <code class="language-plaintext highlighter-rouge">viewBinding</code> inside <code class="language-plaintext highlighter-rouge">app/build.gradle</code> to make accessing views easier:</p> <div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span> <span class="o">{</span>
    <span class="c1">// ...other config</span>

    <span class="n">viewBinding</span> <span class="o">{</span>
        <span class="n">enabled</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>With all the prerequisites clear, let‚Äôs jump into the tutorial now!</p> <h1 id="1-creating-the-room-database">1. Creating the Room Database</h1> <h2 id="needed-files">Needed Files</h2> <p>The first step to begin would be to create a Room Database that will hold the data we will be using.</p> <p>To do this, first create a <code class="language-plaintext highlighter-rouge">db</code> package, to make things organized. Create two files in the <code class="language-plaintext highlighter-rouge">db</code> package:</p> <ul> <li><strong><code class="language-plaintext highlighter-rouge">ItemDatabase.kt</code></strong>: This will be the actual database implementation.</li> <li><strong><code class="language-plaintext highlighter-rouge">ItemDao.kt</code></strong>: This is the <strong>D</strong>ata <strong>A</strong>ccess <strong>O</strong>bject(<strong>DAO</strong>) that will be used to access the data in the database.</li> </ul> <p>Then we make the actual <strong><code class="language-plaintext highlighter-rouge">Item.kt</code></strong> data holder class inside a new package called <code class="language-plaintext highlighter-rouge">model</code>.</p> <p>We will implement these files in a short moment. These are the files we just added:</p> <p><img src="https://user-images.githubusercontent.com/46792249/164982771-e29efcda-fefa-416e-ad68-81e905161927.png" alt="Files to be added to the project"/></p> <h2 id="class-implementations">Class Implementations</h2> <h3 id="itemkt"><strong><code class="language-plaintext highlighter-rouge">Item.kt</code></strong></h3> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.dbpagingdemo.model</span>

<span class="k">import</span> <span class="nn">...</span>

<span class="nd">@Entity</span><span class="p">(</span><span class="n">tableName</span> <span class="p">=</span> <span class="s">"items"</span><span class="p">)</span>
<span class="kd">data class</span> <span class="nc">Item</span><span class="p">(</span>
    <span class="nd">@PrimaryKey</span><span class="p">(</span><span class="n">autoGenerate</span> <span class="p">=</span> <span class="k">true</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">id</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span>
<span class="p">)</span>
</code></pre></div></div> <p>This is a pretty basic data class. There is an autogenerated primary key <code class="language-plaintext highlighter-rouge">id</code> that identifies different items in the db. The <code class="language-plaintext highlighter-rouge">name</code> field is the string data for a specific item.</p> <h3 id="itemdaokt"><strong><code class="language-plaintext highlighter-rouge">ItemDao.kt</code></strong></h3> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.dbpagingdemo.db</span>

<span class="k">import</span> <span class="nn">...</span>

<span class="nd">@Dao</span>
<span class="kd">interface</span> <span class="nc">ItemDao</span> <span class="p">{</span>
    <span class="nd">@Query</span><span class="p">(</span><span class="s">"SELECT * FROM items ORDER BY id ASC LIMIT :limit OFFSET :offset"</span><span class="p">)</span>
    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">getPagedList</span><span class="p">(</span><span class="n">limit</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">offset</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Item</span><span class="p">&gt;</span>

    <span class="nd">@Insert</span><span class="p">(</span><span class="n">onConflict</span> <span class="p">=</span> <span class="nc">OnConflictStrategy</span><span class="p">.</span><span class="nc">REPLACE</span><span class="p">)</span>
    <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">insert</span><span class="p">(</span><span class="n">item</span><span class="p">:</span> <span class="nc">Item</span><span class="p">):</span> <span class="nc">Long</span>
<span class="p">}</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">ItemDao</code> is an abstract class whose implementation will be generated by Room.</p> <p>This class contains the functions needed to run queries in the database. Room provides useful annotations to ease the process of writing these functions.</p> <p>The <code class="language-plaintext highlighter-rouge">getPagedList()</code> function returns a list of items after filtering it with the <code class="language-plaintext highlighter-rouge">limit</code> and <code class="language-plaintext highlighter-rouge">offset</code> parameters. This returns small chunks of data that will later be loaded by the Paging 3 library to be shown in the UI.</p> <p>The <code class="language-plaintext highlighter-rouge">insert()</code> function inserts an <code class="language-plaintext highlighter-rouge">item</code> into the database.</p> <h3 id="itemdatabasekt"><strong><code class="language-plaintext highlighter-rouge">ItemDatabase.kt</code></strong></h3> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.dbpagingdemo.db</span>

<span class="k">import</span> <span class="nn">...</span>

<span class="nd">@Database</span><span class="p">(</span><span class="n">entities</span> <span class="p">=</span> <span class="p">[</span><span class="nc">Item</span><span class="o">::</span><span class="k">class</span><span class="p">],</span> <span class="n">version</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">exportSchema</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">ItemDatabase</span> <span class="p">:</span> <span class="nc">RoomDatabase</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">abstract</span> <span class="k">fun</span> <span class="nf">itemDao</span><span class="p">():</span> <span class="nc">ItemDao</span>

    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="k">private</span> <span class="kd">var</span> <span class="py">INSTANCE</span><span class="p">:</span> <span class="nc">ItemDatabase</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span>

        <span class="k">fun</span> <span class="nf">getInstance</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="nc">Context</span><span class="p">):</span> <span class="nc">ItemDatabase</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nc">INSTANCE</span> <span class="o">?:</span> <span class="nf">synchronized</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">instance</span> <span class="p">=</span> <span class="nc">Room</span><span class="p">.</span><span class="nf">databaseBuilder</span><span class="p">(</span>
                    <span class="n">context</span><span class="p">,</span>
                    <span class="nc">ItemDatabase</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">,</span>
                    <span class="s">"item_database"</span>
                <span class="p">).</span><span class="nf">addCallback</span><span class="p">(</span><span class="kd">object</span> <span class="err">: </span><span class="nc">RoomDatabase</span><span class="p">.</span><span class="nc">Callback</span><span class="p">()</span> <span class="p">{</span>
                    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">db</span><span class="p">:</span> <span class="nc">SupportSQLiteDatabase</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>

                        <span class="nc">INSTANCE</span><span class="o">?.</span><span class="nf">let</span> <span class="p">{</span> <span class="n">database</span> <span class="p">-&gt;</span>
                            <span class="nc">CoroutineScope</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">IO</span><span class="p">).</span><span class="nf">launch</span> <span class="p">{</span>
                                <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">100</span><span class="p">).</span><span class="nf">forEach</span> <span class="p">{</span>
                                    <span class="n">database</span><span class="p">.</span><span class="nf">itemDao</span><span class="p">().</span><span class="nf">insert</span><span class="p">(</span> <span class="nc">Item</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">"Item $it"</span><span class="p">)</span> <span class="p">)</span>
                                <span class="p">}</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}).</span><span class="nf">build</span><span class="p">()</span>

                <span class="nc">INSTANCE</span> <span class="p">=</span> <span class="n">instance</span>
                <span class="n">instance</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here, we make the <code class="language-plaintext highlighter-rouge">ItemDatabase</code> abstract because Room will auto-generate it for us. Inside the class‚Äôs <code class="language-plaintext highlighter-rouge">companion object</code> block, we define a function that returns the instance of the database.</p> <p>The <code class="language-plaintext highlighter-rouge">getInstance()</code> function is interesting! We put up this <code class="language-plaintext highlighter-rouge">INSTANCE</code> returning logic to avoid <a href="https://en.wikipedia.org/wiki/Race_condition">race conditions</a>. Basically, if two pieces of code try to access the same resource at the same time, it causes race conditions. For generalized objects it is okay, but for something like Databases- we never want to cause conflicts between data.</p> <p>That‚Äôs the reason we either return <code class="language-plaintext highlighter-rouge">INSTANCE</code> of the Room Database if it is not null (the <code class="language-plaintext highlighter-rouge">?:</code> elvis operator), or if it is we then add the logic to build the database, assign it to the instance and then return it.</p> <p>We add a callback of type <code class="language-plaintext highlighter-rouge">RoomDatabase.Callback()</code> to execute some code once the database is created. We use this to pre-populate the database with some fake preloaded data.</p> <p>The <code class="language-plaintext highlighter-rouge">(0..100).forEach()</code> loop goes over the range and adds <code class="language-plaintext highlighter-rouge">Item</code> objects to the database, with the name <code class="language-plaintext highlighter-rouge">Item &lt;number&gt;</code> for each iteration. The <code class="language-plaintext highlighter-rouge">id</code> passed is <code class="language-plaintext highlighter-rouge">0</code> because this will be autogenerated by Room anyways.</p> <h1 id="2-setup-recyclerview">2. Setup RecyclerView</h1> <h2 id="defining-layouts">Defining Layouts</h2> <p>For the RecyclerView, we need to update our <code class="language-plaintext highlighter-rouge">MainActivity</code> to show a RecyclerView instead of the auto-generated text view.</p> <h3 id="activity_mainxml"><strong><code class="language-plaintext highlighter-rouge">activity_main.xml</code></strong></h3> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span>
    <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;androidx.recyclerview.widget.RecyclerView</span>
        <span class="na">android:id=</span><span class="s">"@+id/recyclerView"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
        <span class="na">app:layoutManager=</span><span class="s">"androidx.recyclerview.widget.LinearLayoutManager"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre></div></div> <p>This is a basic layout - we use <code class="language-plaintext highlighter-rouge">LinearLayout</code> to make things easier as we don‚Äôt need a complex UI for this demo anyways.</p> <p>We add a full screen <code class="language-plaintext highlighter-rouge">RecyclerView</code> to the layout. The grid manager is set to <code class="language-plaintext highlighter-rouge">LinearLayoutManager</code> to stack the RecyclerView items in a linear direction (in our case, vertical).</p> <h3 id="itemxml"><strong><code class="language-plaintext highlighter-rouge">item.xml</code></strong></h3> <p>We need to generate a new layout that serves as a container for the RecyclerView items. Make a minimal <code class="language-plaintext highlighter-rouge">item.xml</code> layout which just shows a text view. Again, use <code class="language-plaintext highlighter-rouge">LinearLayout</code> as it doesn‚Äôt need to be complex. Don‚Äôt make the LinearLayout full screen as that can cause a lot of whitespace.</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span>
    <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
    <span class="na">android:layout_margin=</span><span class="s">"8dp"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:id=</span><span class="s">"@+id/textView"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:textSize=</span><span class="s">"18sp"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre></div></div> <h2 id="making-a-recyclerview-adapter">Making a RecyclerView Adapter</h2> <p>We need a RecyclerView adapter to show the data in the RecyclerView. Create a <code class="language-plaintext highlighter-rouge">MainAdapter.kt</code> class that inherits from <code class="language-plaintext highlighter-rouge">PagingDataAdapter</code>. It is a special adapter provided by the Paging 3 library that will help us to show the data in the RecyclerView. It also supports header and footer items in RecyclerView that we will use in a moment.</p> <p>Code the <code class="language-plaintext highlighter-rouge">MainAdapter</code> like this:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.dbpagingdemo</span>

<span class="k">import</span> <span class="nn">...</span>

<span class="kd">class</span> <span class="nc">MainAdapter</span> <span class="p">:</span> <span class="nc">PagingDataAdapter</span><span class="p">&lt;</span><span class="nc">Item</span><span class="p">,</span> <span class="nc">MainAdapter</span><span class="p">.</span><span class="nc">MainViewHolder</span><span class="p">&gt;(</span><span class="nc">DIFF_CALLBACK</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">DIFF_CALLBACK</span> <span class="p">=</span> <span class="kd">object</span> <span class="err">: </span><span class="nc">DiffUtil</span><span class="p">.</span><span class="nc">ItemCallback</span><span class="p">&lt;</span><span class="nc">Item</span><span class="p">&gt;()</span> <span class="p">{</span>
            <span class="k">override</span> <span class="k">fun</span> <span class="nf">areItemsTheSame</span><span class="p">(</span><span class="n">oldItem</span><span class="p">:</span> <span class="nc">Item</span><span class="p">,</span> <span class="n">newItem</span><span class="p">:</span> <span class="nc">Item</span><span class="p">):</span> <span class="nc">Boolean</span> <span class="p">=</span>
                <span class="n">oldItem</span><span class="p">.</span><span class="n">id</span> <span class="p">==</span> <span class="n">newItem</span><span class="p">.</span><span class="n">id</span>

            <span class="k">override</span> <span class="k">fun</span> <span class="nf">areContentsTheSame</span><span class="p">(</span><span class="n">oldItem</span><span class="p">:</span> <span class="nc">Item</span><span class="p">,</span> <span class="n">newItem</span><span class="p">:</span> <span class="nc">Item</span><span class="p">):</span> <span class="nc">Boolean</span> <span class="p">=</span>
                <span class="n">oldItem</span> <span class="p">==</span> <span class="n">newItem</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">inner</span> <span class="kd">class</span> <span class="nc">MainViewHolder</span><span class="p">(</span><span class="kd">val</span> <span class="py">binding</span><span class="p">:</span> <span class="nc">ItemBinding</span><span class="p">)</span> <span class="p">:</span> <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">ViewHolder</span><span class="p">(</span><span class="n">binding</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateViewHolder</span><span class="p">(</span><span class="n">parent</span><span class="p">:</span> <span class="nc">ViewGroup</span><span class="p">,</span> <span class="n">viewType</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">MainViewHolder</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">MainViewHolder</span><span class="p">(</span>
            <span class="nc">ItemBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">LayoutInflater</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">context</span><span class="p">),</span> <span class="n">parent</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onBindViewHolder</span><span class="p">(</span><span class="n">holder</span><span class="p">:</span> <span class="nc">MainViewHolder</span><span class="p">,</span> <span class="n">position</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">item</span> <span class="p">=</span> <span class="nf">getItem</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>

        <span class="n">holder</span><span class="p">.</span><span class="n">binding</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>
            <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">item</span><span class="o">?.</span><span class="n">name</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>To the superclass <code class="language-plaintext highlighter-rouge">PagingDataAdapter</code>, we pass in the <code class="language-plaintext highlighter-rouge">Item</code> data class as that is the type of data we want to show in the RecyclerView and <code class="language-plaintext highlighter-rouge">MainViewHolder</code> as the type of view holder we want to use.</p> <p>The <code class="language-plaintext highlighter-rouge">DIFF_CALLBACK</code> is used by the Paging library to determine if the data in the RecyclerView has changed or not.</p> <p>This callback uses item comparisons to determine data changes and apply changes to RecyclerView only for the changed items. This is a very efficient way to update the RecyclerView as compared to rebuilding the RecyclerView every time the data changes.</p> <p>We instantiate and bind data to the view holder in the <code class="language-plaintext highlighter-rouge">onCreateViewHolder()</code> and <code class="language-plaintext highlighter-rouge">onBindViewHolder()</code> functions respectively.</p> <p>That‚Äôs it for the RecyclerView adapter!</p> <h1 id="3-build-the-pagination-logic">3. Build the Pagination Logic</h1> <h2 id="setting-up-pagingsource">Setting up PagingSource</h2> <p>The <code class="language-plaintext highlighter-rouge">PagingSource</code> defines the actual implementation for getting the data from the Room Database and returning loaded data pages, which would be sent to the RecyclerView adapter.</p> <p>Make a package <code class="language-plaintext highlighter-rouge">pagination</code> and define a <code class="language-plaintext highlighter-rouge">MainPagingSource.kt</code> class like this:</p> <h3 id="mainpagingsourcekt"><strong><code class="language-plaintext highlighter-rouge">MainPagingSource.kt</code></strong></h3> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.dbpagingdemo.pagination</span>

<span class="kd">class</span> <span class="nc">MainPagingSource</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">dao</span><span class="p">:</span> <span class="nc">ItemDao</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">PagingSource</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">Item</span><span class="p">&gt;()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">suspend</span> <span class="k">fun</span> <span class="nf">load</span><span class="p">(</span><span class="n">params</span><span class="p">:</span> <span class="nc">LoadParams</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;):</span> <span class="nc">LoadResult</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">Item</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">page</span> <span class="p">=</span> <span class="n">params</span><span class="p">.</span><span class="n">key</span> <span class="o">?:</span> <span class="mi">0</span>

        <span class="k">return</span> <span class="k">try</span> <span class="p">{</span>
            <span class="kd">val</span> <span class="py">entities</span> <span class="p">=</span> <span class="n">dao</span><span class="p">.</span><span class="nf">getPagedList</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="n">loadSize</span><span class="p">,</span> <span class="n">page</span> <span class="p">*</span> <span class="n">params</span><span class="p">.</span><span class="n">loadSize</span><span class="p">)</span>

            <span class="c1">// simulate page loading</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="nf">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>

            <span class="nc">LoadResult</span><span class="p">.</span><span class="nc">Page</span><span class="p">(</span>
                <span class="n">data</span> <span class="p">=</span> <span class="n">entities</span><span class="p">,</span>
                <span class="n">prevKey</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">null</span> <span class="k">else</span> <span class="n">page</span> <span class="p">-</span> <span class="mi">1</span><span class="p">,</span>
                <span class="n">nextKey</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">entities</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="k">null</span> <span class="k">else</span> <span class="n">page</span> <span class="p">+</span> <span class="mi">1</span>
            <span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Exception</span><span class="p">)</span> <span class="p">{</span>
            <span class="nc">LoadResult</span><span class="p">.</span><span class="nc">Error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getRefreshKey</span><span class="p">(</span><span class="n">state</span><span class="p">:</span> <span class="nc">PagingState</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">Item</span><span class="p">&gt;):</span> <span class="nc">Int</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="p">.</span><span class="n">anchorPosition</span><span class="o">?.</span><span class="nf">let</span> <span class="p">{</span> <span class="n">anchorPosition</span> <span class="p">-&gt;</span>
            <span class="kd">val</span> <span class="py">anchorPage</span> <span class="p">=</span> <span class="n">state</span><span class="p">.</span><span class="nf">closestPageToPosition</span><span class="p">(</span><span class="n">anchorPosition</span><span class="p">)</span>
            <span class="n">anchorPage</span><span class="o">?.</span><span class="n">prevKey</span><span class="o">?.</span><span class="nf">plus</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">?:</span> <span class="n">anchorPage</span><span class="o">?.</span><span class="n">nextKey</span><span class="o">?.</span><span class="nf">minus</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>The class inherits from <code class="language-plaintext highlighter-rouge">PagingSource</code>:</p> <ul> <li>We pass an <code class="language-plaintext highlighter-rouge">Int</code> as the first parameter since the pages are differentiated based on pages (1st Page, 2nd Page, and so on).</li> <li>We pass an <code class="language-plaintext highlighter-rouge">Item</code> as the second parameter since the data we are handling here is of type <code class="language-plaintext highlighter-rouge">Item</code>.</li> </ul> <p>Each class that inherits from <code class="language-plaintext highlighter-rouge">PagingSource</code> needs to override <code class="language-plaintext highlighter-rouge">load()</code> and <code class="language-plaintext highlighter-rouge">getRefreshKey()</code> functions.</p> <ul> <li>The <code class="language-plaintext highlighter-rouge">load()</code> function gets details about the page we need to load, loads it, and returns the page with the needed meta-data. It also handles errors that might occur.</li> <li>The <code class="language-plaintext highlighter-rouge">getRefreshKey()</code> method of the <code class="language-plaintext highlighter-rouge">PagingSource</code> class is used to get the key of the page that will be passed into the params for <code class="language-plaintext highlighter-rouge">load()</code> function. This is calculated on subsequent refreshes/invalidation of the data after the initial load.</li> </ul> <p>The <code class="language-plaintext highlighter-rouge">load()</code> function calls <code class="language-plaintext highlighter-rouge">getPagedList()</code> from the dao by passing in values of <code class="language-plaintext highlighter-rouge">limit</code> and <code class="language-plaintext highlighter-rouge">offset</code> from the <code class="language-plaintext highlighter-rouge">params</code>. We will define these parameters in <code class="language-plaintext highlighter-rouge">MainViewModel</code> while accessing data.</p> <p>If the page load was successful, we return <code class="language-plaintext highlighter-rouge">LoadResult.Page()</code> with the data and meta information for the next and preivious pages if the db call was successful, else we return <code class="language-plaintext highlighter-rouge">LoadResult.Error</code> with the exception that occurred.</p> <p>This is basically it for the <code class="language-plaintext highlighter-rouge">PagingSource</code>!</p> <h2 id="setting-up-loadstateadapter">Setting up LoadStateAdapter</h2> <p>The <code class="language-plaintext highlighter-rouge">LoadStateAdapter</code> is used to show the loading state of the RecyclerView. Suppose a user scrolls to the bottom of the screen and the next pagination data isn‚Äôt loaded yet. If there‚Äôs no visual indication for this, it creates confusion for the user.</p> <p><code class="language-plaintext highlighter-rouge">LoadStateAdapter</code> helps us to show the visual info on the loading state of the RecyclerView. In our case, we will show a progress bar while the next page is loading.</p> <p>To do that, create a <code class="language-plaintext highlighter-rouge">load_state_view.xml</code> layout with a progress bar like this:</p> <h3 id="load_state_viewxml"><code class="language-plaintext highlighter-rouge">load_state_view.xml</code></h3> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span> 
    <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
    <span class="na">android:gravity=</span><span class="s">"center"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;ProgressBar</span>
        <span class="na">android:id=</span><span class="s">"@+id/progress"</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre></div></div> <p>Next, create a <code class="language-plaintext highlighter-rouge">MainLoadStateAdapter.kt</code> class inside the <code class="language-plaintext highlighter-rouge">pagination</code> package.</p> <h3 id="mainloadstateadapterkt"><strong><code class="language-plaintext highlighter-rouge">MainLoadStateAdapter.kt</code></strong></h3> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.dbpagingdemo</span>

<span class="k">import</span> <span class="nn">...</span>

<span class="kd">class</span> <span class="nc">MainLoadStateAdapter</span> <span class="p">:</span> <span class="nc">LoadStateAdapter</span><span class="p">&lt;</span><span class="nc">MainLoadStateAdapter</span><span class="p">.</span><span class="nc">LoadStateViewHolder</span><span class="p">&gt;()</span> <span class="p">{</span>

    <span class="k">inner</span> <span class="kd">class</span> <span class="nc">LoadStateViewHolder</span><span class="p">(</span><span class="kd">val</span> <span class="py">binding</span><span class="p">:</span> <span class="nc">LoadStateViewBinding</span><span class="p">)</span> <span class="p">:</span>
        <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">ViewHolder</span><span class="p">(</span><span class="n">binding</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateViewHolder</span><span class="p">(</span><span class="n">parent</span><span class="p">:</span> <span class="nc">ViewGroup</span><span class="p">,</span> <span class="n">loadState</span><span class="p">:</span> <span class="nc">LoadState</span><span class="p">):</span> <span class="nc">LoadStateViewHolder</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">LoadStateViewHolder</span><span class="p">(</span>
            <span class="nc">LoadStateViewBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">LayoutInflater</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">context</span><span class="p">),</span> <span class="n">parent</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onBindViewHolder</span><span class="p">(</span><span class="n">holder</span><span class="p">:</span> <span class="nc">LoadStateViewHolder</span><span class="p">,</span> <span class="n">loadState</span><span class="p">:</span> <span class="nc">LoadState</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">holder</span><span class="p">.</span><span class="n">binding</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>
            <span class="n">progress</span><span class="p">.</span><span class="n">isVisible</span> <span class="p">=</span> <span class="n">loadState</span> <span class="k">is</span> <span class="nc">LoadState</span><span class="p">.</span><span class="nc">Loading</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>We basically bind the progress bar from <code class="language-plaintext highlighter-rouge">load_state_view.xml</code> to the <code class="language-plaintext highlighter-rouge">LoadStateViewHolder</code> class. The key thing to notice here is the progress bar is visible only if <code class="language-plaintext highlighter-rouge">loadState</code> is <code class="language-plaintext highlighter-rouge">LoadState.Loading</code>.</p> <p>The <code class="language-plaintext highlighter-rouge">onBindViewHolder()</code> inside <code class="language-plaintext highlighter-rouge">MainLoadStateAdapter</code> is called every time the RecyclerView is invalidated, which provides the possibility to show and hide the progress bar based on the load state.</p> <h1 id="4-attaching-data-to-the-ui">4. Attaching Data to the UI</h1> <h2 id="setting-up-the-viewmodel">Setting up the ViewModel</h2> <p>The <code class="language-plaintext highlighter-rouge">MainViewModel</code> should access the data from the <code class="language-plaintext highlighter-rouge">PagingSource</code>, and pass it to the RecyclerView adapter.</p> <p>Let‚Äôs build the <code class="language-plaintext highlighter-rouge">MainViewModel</code> class.</p> <h3 id="mainviewmodelkt"><strong><code class="language-plaintext highlighter-rouge">MainViewModel.kt</code></strong></h3> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.paginationdemo</span>

<span class="k">import</span> <span class="nn">...</span>

<span class="kd">class</span> <span class="nc">MainViewModel</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">dao</span><span class="p">:</span> <span class="nc">ItemDao</span>
<span class="p">):</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">val</span> <span class="py">data</span> <span class="p">=</span> <span class="nc">Pager</span><span class="p">(</span>
        <span class="nc">PagingConfig</span><span class="p">(</span>
            <span class="n">pageSize</span> <span class="p">=</span> <span class="mi">20</span><span class="p">,</span>
            <span class="n">enablePlaceholders</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
            <span class="n">initialLoadSize</span> <span class="p">=</span> <span class="mi">20</span>
        <span class="p">),</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nc">MainPagingSource</span><span class="p">(</span><span class="n">dao</span><span class="p">)</span>
    <span class="p">}.</span><span class="n">flow</span><span class="p">.</span><span class="nf">cachedIn</span><span class="p">(</span><span class="n">viewModelScope</span><span class="p">)</span>
    
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">MainViewModelFactory</span><span class="p">(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">dao</span><span class="p">:</span> <span class="nc">ItemDao</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModelProvider</span><span class="p">.</span><span class="nc">Factory</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">&gt;</span> <span class="nf">create</span><span class="p">(</span><span class="n">modelClass</span><span class="p">:</span> <span class="nc">Class</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;):</span> <span class="nc">T</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">modelClass</span><span class="p">.</span><span class="nf">isAssignableFrom</span><span class="p">(</span><span class="nc">MainViewModel</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">))</span> <span class="p">{</span>
            <span class="nd">@Suppress</span><span class="p">(</span><span class="s">"UNCHECKED_CAST"</span><span class="p">)</span>
            <span class="k">return</span> <span class="nc">MainViewModel</span><span class="p">(</span><span class="n">dao</span><span class="p">)</span> <span class="k">as</span> <span class="nc">T</span>
        <span class="p">}</span>
        <span class="k">throw</span> <span class="nc">IllegalArgumentException</span><span class="p">(</span><span class="s">"Unknown ViewModel class"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Inside the <code class="language-plaintext highlighter-rouge">MainViewModel</code>, we hold to create a variable <code class="language-plaintext highlighter-rouge">data</code> that is a <code class="language-plaintext highlighter-rouge">Pager</code> object, to which we pass the <code class="language-plaintext highlighter-rouge">PagingConfig</code> and <code class="language-plaintext highlighter-rouge">PagingSource</code> objects. This is the place where we define our pagination configuration.</p> <p>We define that the <code class="language-plaintext highlighter-rouge">pageSize</code> should be <code class="language-plaintext highlighter-rouge">20</code>. This means that the Paging 3 library will load <code class="language-plaintext highlighter-rouge">20</code> values at a time from the data. The <code class="language-plaintext highlighter-rouge">initialLoadSize</code> is also set to <code class="language-plaintext highlighter-rouge">20</code> because if unset, the paging library loads <code class="language-plaintext highlighter-rouge">3 * pageSize</code> for the first load.</p> <p>We pass a lambda that defines a lambda and pass in our <code class="language-plaintext highlighter-rouge">MainPagingSource</code> class. Paging 3 handles calling the <code class="language-plaintext highlighter-rouge">load()</code> function for us as and when needed by the <code class="language-plaintext highlighter-rouge">PagingAdapter</code>, so we don‚Äôt need to worry about the hassle of calling it manually.</p> <p>Then we access the <code class="language-plaintext highlighter-rouge">flow</code> property so that we can collect the new emissions of data. We also cache these in <code class="language-plaintext highlighter-rouge">viewModelScope</code> for memory optimizations.</p> <h2 id="finishing-up-mainactivity">Finishing up <code class="language-plaintext highlighter-rouge">MainActivity</code></h2> <p>We now need to bind everything up through the <code class="language-plaintext highlighter-rouge">MainActivity</code>. Setup the <code class="language-plaintext highlighter-rouge">MainActivity</code> as below:</p> <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">com.example.paginationdemo</span>

<span class="k">import</span> <span class="nn">...</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

    <span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">binding</span><span class="p">:</span> <span class="nc">ActivityMainBinding</span>
    <span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">dao</span><span class="p">:</span> <span class="nc">ItemDao</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">viewModel</span><span class="p">:</span> <span class="nc">MainViewModel</span> <span class="k">by</span> <span class="nf">viewModels</span> <span class="p">{</span> <span class="nc">MainViewModelFactory</span><span class="p">(</span><span class="n">dao</span><span class="p">)</span> <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>

        <span class="n">dao</span> <span class="p">=</span> <span class="nc">ItemDatabase</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">itemDao</span><span class="p">()</span>

        <span class="n">binding</span> <span class="p">=</span> <span class="nc">ActivityMainBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="n">layoutInflater</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="n">binding</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>

        <span class="kd">val</span> <span class="py">adapter</span> <span class="p">=</span> <span class="nc">MainAdapter</span><span class="p">()</span>
        <span class="n">binding</span><span class="p">.</span><span class="n">recyclerView</span><span class="p">.</span><span class="n">adapter</span> <span class="p">=</span> <span class="n">adapter</span><span class="p">.</span><span class="nf">withLoadStateFooter</span><span class="p">(</span>
            <span class="nc">MainLoadStateAdapter</span><span class="p">()</span>
        <span class="p">)</span>

        <span class="n">lifecycleScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">{</span>
            <span class="n">viewModel</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">collectLatest</span> <span class="p">{</span>
                <span class="n">adapter</span><span class="p">.</span><span class="nf">submitData</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>We define the <code class="language-plaintext highlighter-rouge">binding</code>, <code class="language-plaintext highlighter-rouge">dao</code> and <code class="language-plaintext highlighter-rouge">viewModel</code> variables and instantiate the needed ones in <code class="language-plaintext highlighter-rouge">onCreate()</code>.</p> <p>Then the magic happens! We assign the <code class="language-plaintext highlighter-rouge">MainAdapter</code> we built and also pass in the <code class="language-plaintext highlighter-rouge">MainLoadStateAdapter()</code> in the <code class="language-plaintext highlighter-rouge">withLoadStateFooter()</code> function. This appropriately handles showing the progress bar while the next page is loading, and also hides it with animation when the next page is loaded / no next page is available.</p> <p>We also launch a coroutine to collect the emissions of data from the <code class="language-plaintext highlighter-rouge">flow</code> property of the <code class="language-plaintext highlighter-rouge">viewModel</code> and pass it to the <code class="language-plaintext highlighter-rouge">adapter</code>. This way our adapter will be updated with the new data as and when it is emitted.</p> <p>It‚Äôs time to run our application! You might not see data at the first run because the database itself is being created. But from the second run, the app should work as expected:</p> <p><img src="https://user-images.githubusercontent.com/46792249/164981913-dbee3b8d-ccb1-4442-97f0-a91c032c25d7.jpg" alt="Demo of the application we will build" width="40%"/></p> <h1 id="wrapping-up">Wrapping Up</h1> <p>This was a brief intro on how to paginate data from a Room Database using the Paging 3 library. In this tutorial, we covered the setup for situations when we just have a local data source to get the data from.</p> <p>The Paging 3 library supports more use cases like loading the paginated data from a network, or a combination of network and local data sources. You can learn more about the library from the <a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview">documentation</a>.</p> <p>I hope you enjoyed reading this in-depth tutorial and hope you learned something new!</p> <p>Happy Coding!</p>]]></content><author><name>Gourav Khunger</name></author><category term="android"/><category term="intermediates"/><category term="app-development"/><category term="libraries"/><summary type="html"><![CDATA[The complete guide to paginating *just* a room database (without Network level pagination) with the Paging 3 library in Android using Kotlin.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/164977196-3de454f4-8a7e-4feb-9d1b-cfd6ea53ba03.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/164977196-3de454f4-8a7e-4feb-9d1b-cfd6ea53ba03.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build a faucet CLI using NodeJS üöÄ</title><link href="https://genicsblog.com/kira/how-to-build-a-faucet-cli-using-node-js" rel="alternate" type="text/html" title="How to build a faucet CLI using NodeJS üöÄ"/><published>2022-04-24T00:00:00+00:00</published><updated>2022-04-24T00:00:00+00:00</updated><id>https://genicsblog.com/kira/how-to-build-a-faucet-cli</id><content type="html" xml:base="https://genicsblog.com/kira/how-to-build-a-faucet-cli-using-node-js"><![CDATA[<p>Hey everyone üëã! I guess I took a long break from blogging but I am back with some interesting web3 stuff. Today we are doing to be BUIDLing a command-line interface that would act as a faucet and we would be also adding metamask authentication to it üöÄ!</p> <p><img src="https://c.tenor.com/oR5fQW3UW78AAAAC/gm-web3.gif" alt="https://c.tenor.com/oR5fQW3UW78AAAAC/gm-web3.gif"/></p> <h1 id="-the-idea">üí° The idea</h1> <p>Let‚Äôs understand the idea of the command-line interface which we are going to be building. It‚Äôs a simple command-line interface that would transfer testnet tokens to the user and we are going to be adding metamask authentication also üëÄ.</p> <p>Wait what? Metamask authentication via a CLI ???</p> <p><img src="https://c.tenor.com/awhlFQC8WcAAAAAM/kid-what.gif" alt="https://c.tenor.com/awhlFQC8WcAAAAAM/kid-what.gif"/></p> <p>Let me explain how are we going to implement the Metamask authentication.</p> <ul> <li>We would create a basic website using Next.js which would have the connect with wallet (Metamask authentication) button. We would be using thirdweb to add Metamask authentication to our Next.js website.</li> <li>After the user has authenticated themselves via Metamask on the website, they would be redirected to a page with route <code class="language-plaintext highlighter-rouge">/callback</code>. When redirected the page would also contain a query parameter that contains the user‚Äôs wallet address üëÄ. So the user would be redirected to a page with route path something like this: <code class="language-plaintext highlighter-rouge">/callback?address=0xd24CA0297558f0827e2C467603869D1AC9fF435d</code>.</li> <li>We would be starting up a local express application at port <code class="language-plaintext highlighter-rouge">9991</code> (don‚Äôt worry we would be immediately closing the port after the authentication process is been completed). The <code class="language-plaintext highlighter-rouge">/callback</code> route exists on this local express application.</li> <li>üëÄ We don‚Äôt want the user to be seeing a blank page for hours right? (in context to make the user stay on the <code class="language-plaintext highlighter-rouge">/callback</code> route on the local express application) Instead, we can redirect them to a <code class="language-plaintext highlighter-rouge">/done</code> route on the main website, so that they will know that the authentication process is being completed.</li> </ul> <p><img src="https://imgur.com/OeXrCG0.png" alt="Authentication workflow"/></p> <p>üòµ‚Äçüí´ Woah! That‚Äôs hard to digest in one go</p> <h1 id="Ô∏è-tech-stack">‚öíÔ∏è Tech stack</h1> <p>The tech stack which we are going to be using to build this CLI:</p> <ul> <li>TypeScript as the main programming language that we are going to be using to program the command-line interface, website, and the backend</li> <li>Next.js as the framework that we are going to be using to build the website</li> <li>Tailwind CSS as our CSS framework to style the website</li> <li>Express as the backend framework</li> <li>Oclif as our command-line interface framework</li> <li>Thirdweb for the metamask authentication</li> <li>Web3.js and Ethers to perform tasks such as sending the testnet token to the user</li> <li>Alchemy as our blockchain node service</li> </ul> <h1 id="Ô∏è-building-the-website">üõ†Ô∏è Building the website</h1> <h2 id="Ô∏è-creating-a-new-nextjs-project">üèóÔ∏è Creating a new Next.js project</h2> <p>Let‚Äôs create a new Next.js project by using the following command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app <span class="nt">-e</span><span class="o">=</span>with-tailwindcss thw-faucet-cli
</code></pre></div></div> <p>I am using <code class="language-plaintext highlighter-rouge">thw-faucet-cli</code> as my CLI name. Feel free to change the name of the CLI.</p> <p>This should generate a folder structure similar to this:</p> <p><img src="https://imgur.com/7wf52Gk.png" alt="Folder structure of the generated Next.js project"/></p> <h2 id="-adding-metamask-authentication-using-thirdweb">ü¶Å Adding metamask authentication using thirdweb</h2> <p>We would have to install a few packages so that we can build the metamask authentication using thirdweb.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add @thirdweb-dev/react @thirdweb-dev/sdk ethers
</code></pre></div></div> <p>After you have installed it, go ahead and open the <code class="language-plaintext highlighter-rouge">pages/_app.tsx</code> file. We would have to set up the <code class="language-plaintext highlighter-rouge">ThirdwebProvider</code> that provides all the context consumed by your app. With this context, you will have a standard web3 provider that you can use throughout your app.</p> <p>To set up the <code class="language-plaintext highlighter-rouge">ThirdwebProvider</code> you need to just wrap your app with the following setup:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">AppProps</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/app</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ThirdwebProvider</span><span class="p">,</span> <span class="nx">ChainId</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@thirdweb-dev/react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="dl">"</span><span class="s2">../styles/globals.css</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">MyApp</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">}:</span> <span class="nx">AppProps</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">desiredChainId</span> <span class="o">=</span> <span class="nx">ChainId</span><span class="p">.</span><span class="nx">Mumbai</span><span class="p">;</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">ThirdwebProvider</span> <span class="na">desiredChainId</span><span class="p">=</span><span class="si">{</span><span class="nx">desiredChainId</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">ThirdwebProvider</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyApp</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs now add the feature where the user can click a button and can connect their wallet to the website.</p> <p>Head over to the <code class="language-plaintext highlighter-rouge">pages/index.tsx</code> file and add the following code:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextPage</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span>
  <span class="nx">useAddress</span><span class="p">,</span>
  <span class="nx">useMetamask</span><span class="p">,</span>
  <span class="nx">useCoinbaseWallet</span><span class="p">,</span>
  <span class="nx">useWalletConnect</span><span class="p">,</span>
  <span class="nx">useDisconnect</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@thirdweb-dev/react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Home</span><span class="p">:</span> <span class="nx">NextPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">connectWithCoinbaseWallet</span> <span class="o">=</span> <span class="nx">useCoinbaseWallet</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">connectWithMetamask</span> <span class="o">=</span> <span class="nx">useMetamask</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">connectWithWalletConnect</span> <span class="o">=</span> <span class="nx">useWalletConnect</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">useAddress</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">disconnectWallet</span> <span class="o">=</span> <span class="nx">useDisconnect</span><span class="p">();</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">"m-12 font-medium text-gray-600"</span><span class="p">&gt;</span>Address: <span class="si">{</span><span class="nx">address</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">br</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">disconnectWallet</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"w-64 rounded-full bg-blue-600 py-2 font-medium text-white transition-all duration-75 hover:bg-blue-500"</span>
        <span class="p">&gt;</span>
          Disconnect
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex min-h-screen w-full flex-col items-center justify-center gap-4 bg-gray-50"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">connectWithCoinbaseWallet</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"w-64 rounded-full bg-blue-600 py-2 font-medium text-white transition-all duration-75 hover:bg-blue-500"</span>
        <span class="p">&gt;</span>
          Connect Coinbase Wallet
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">connectWithMetamask</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"w-64 rounded-full bg-blue-600 py-2 font-medium text-white transition-all duration-75 hover:bg-blue-500"</span>
        <span class="p">&gt;</span>
          Connect MetaMask
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">connectWithWalletConnect</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"w-64 rounded-full bg-blue-600 py-2 font-medium text-white transition-all duration-75 hover:bg-blue-500"</span>
        <span class="p">&gt;</span>
          Connect WalletConnect
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Home</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs understand what kind of magic is the above code doing üëÄ</p> <p>We are using the React hooks provided by the <code class="language-plaintext highlighter-rouge">@thirdweb-dev/react</code> package which we have installed just a while ago. We are importing the following hooks:</p> <ul> <li><code class="language-plaintext highlighter-rouge">useAddress</code>, Used to get the address when the user has successfully authenticated themselves via metamask</li> <li><code class="language-plaintext highlighter-rouge">connectWithMetamask</code>, Used to open the metamask popup from which the user can authenticate themselves</li> <li><code class="language-plaintext highlighter-rouge">connectWithCoinbaseWallet</code>, Used to authenticate the user via <a href="https://www.coinbase.com/wallet">Coinbase Wallet</a></li> <li><code class="language-plaintext highlighter-rouge">connectWithWalletConnect</code>, Used to authenticate the user via <a href="https://walletconnect.com/">Wallet Connect</a></li> </ul> <p>Let‚Äôs now test it out by running <code class="language-plaintext highlighter-rouge">yarn dev</code> command.</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/Kk5WpFlbC4Y" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <p>üéâ Woohoo!! It‚Äôs working</p> <h2 id="-building-the-done-page">üé® Building the done page</h2> <p>Let‚Äôs now build the done page. We are going to keep it simple as of this tutorial, you can improve the UI as you wish.</p> <p>Create a new file named <code class="language-plaintext highlighter-rouge">done.tsx</code> under the <code class="language-plaintext highlighter-rouge">pages</code> folder and add the following code:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextPage</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Done</span><span class="p">:</span> <span class="nx">NextPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">"m-12 font-medium text-gray-600"</span><span class="p">&gt;</span>
      You have successfully connected your metamask wallet to the CLI. You can
      now close this tab and return to the CLI
    <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Done</span><span class="p">;</span>
</code></pre></div></div> <h1 id="Ô∏è-building-the-cli">üõ†Ô∏è Building the CLI</h1> <h2 id="-creating-a-new-cli-project-using-oclif">üèó Creating a new CLI project using Oclif</h2> <p>Let‚Äôs create a new CLI project using the following command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx oclif generate cli
</code></pre></div></div> <p>Fill in the inputs which are been asked and hit enter. This should generate a folder structure similar to this:</p> <p><img src="https://imgur.com/IbGbxej.png" alt=""/></p> <blockquote> <p>Psst‚Ä¶ I am making a monorepo for this tutorial. So make sure to add the code responsible for CLI into the <code class="language-plaintext highlighter-rouge">cli</code> folder and the code responsible for the website into the <code class="language-plaintext highlighter-rouge">web</code> folder.</p> </blockquote> <p>Let‚Äôs now delete some default generated files by Oclif that we are not going to be using in this tutorial.</p> <ul> <li>We are not going to write any kind of tests for this tutorial. So let‚Äôs just delete the <code class="language-plaintext highlighter-rouge">tests</code> folder and the <code class="language-plaintext highlighter-rouge">.mocharc.json</code> file.</li> <li>We are not going to be using CircleCI for this tutorial. So let‚Äôs just delete the <code class="language-plaintext highlighter-rouge">.circleci</code> folder.</li> <li>Oclif has also generated a default command (<code class="language-plaintext highlighter-rouge">hello</code>) which isn‚Äôt necessary for this tutorial, so let‚Äôs just delete the <code class="language-plaintext highlighter-rouge">src/commands/hello</code> folder.</li> </ul> <h2 id="-building-the-login-command">üîë Building the login command</h2> <p>Oclif CLI has pretty useful generator commands which can be used to generate commands quickly!</p> <p>Let‚Äôs create a new command named <code class="language-plaintext highlighter-rouge">login</code> which would be used to authenticate the user via metamask.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx oclif generate <span class="nb">command </span>login
</code></pre></div></div> <p>This would generate two files:</p> <ul> <li><code class="language-plaintext highlighter-rouge">src/commands/login.ts</code></li> <li><code class="language-plaintext highlighter-rouge">src/test/commands/login.test.ts</code></li> </ul> <p>As I have said before, we would be not writing any tests in this tutorial. So let‚Äôs just delete the <code class="language-plaintext highlighter-rouge">test</code> folder again.</p> <p>Head over to the <code class="language-plaintext highlighter-rouge">src/commands/login.ts</code> file. You would see that there is a lot of boilerplate code.</p> <p>Let‚Äôs clean it up and add a console log to run the <code class="language-plaintext highlighter-rouge">run</code> function by which we can verify that our Oclif CLI setup doesn‚Äôt have any issues.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Command</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@oclif/core</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Login</span> <span class="kd">extends</span> <span class="nx">Command</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ü¶Å Connect your Metamask wallet to the faucet CLI</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">static</span> <span class="nx">examples</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">faucet-cli login</span><span class="dl">"</span><span class="p">];</span>

  <span class="k">async</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">üéâ It's working!</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">description</code> and the <code class="language-plaintext highlighter-rouge">examples</code> are shown in the help sub-command.</p> <p>Let‚Äôs test the CLI out but first, we need to compile TypeScript code into JavaScript code. We do it by running the <code class="language-plaintext highlighter-rouge">yarn build</code> command. It would create a <code class="language-plaintext highlighter-rouge">dist</code> folder with the compiled JavaScript code.</p> <p>To run the CLI, we need to run the <code class="language-plaintext highlighter-rouge">run</code> file present in the <code class="language-plaintext highlighter-rouge">bin</code> folder along with the command. So to run the <code class="language-plaintext highlighter-rouge">login</code> command, we have to run the <code class="language-plaintext highlighter-rouge">./bin/run login</code> command.</p> <p><img src="https://imgur.com/pYbAEBw.png" alt="https://imgur.com/pYbAEBw.png"/></p> <p>üéâ Woohoo! It‚Äôs working!</p> <p>Let‚Äôs now actually build the login command üëÄ.</p> <p>Create a new folder named <code class="language-plaintext highlighter-rouge">lib</code> and then create a new file under it named <code class="language-plaintext highlighter-rouge">connectWallet.ts</code>. This file would contain the logic to connect the user‚Äôs wallet to the CLI.</p> <p>Let‚Äôs install a package called <a href="https://www.npmjs.com/package/inquirer"><code class="language-plaintext highlighter-rouge">inquirer</code></a> which is used to prompt the user for input. We would be using this package to prompt the user to open the browser or not.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add inquirer
</code></pre></div></div> <p>As we are using TypeScript, we need also to install <a href="https://npmjs.com/package/@types/inquirer"><code class="language-plaintext highlighter-rouge">@types/inquirer</code></a> as a dev dependency. The <code class="language-plaintext highlighter-rouge">@types/inquirer</code> package includes the type declarations for the <code class="language-plaintext highlighter-rouge">inquirer</code> package.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/inquirer
</code></pre></div></div> <p>Let‚Äôs import the <code class="language-plaintext highlighter-rouge">inquirer</code> package into our <code class="language-plaintext highlighter-rouge">src/lib/connectWallet.ts</code> file.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs now programmatically create a prompt that asks the user whether to open the browser or not using inquirer.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">connectWallet</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">inquirer</span>
    <span class="p">.</span><span class="nx">prompt</span><span class="p">([</span>
      <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">openBrowser</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">confirm</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Would you like to open the browser to connect wallet?</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">answer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">answer</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connectWallet</span><span class="p">;</span>
</code></pre></div></div> <p>I have wrapped the entire code which is responsible for connecting the user‚Äôs wallet inside a function. As we are going to be importing this into the <code class="language-plaintext highlighter-rouge">src/commands/login.ts</code> file.</p> <p>Let‚Äôs import the <code class="language-plaintext highlighter-rouge">connectWallet</code> function into our <code class="language-plaintext highlighter-rouge">src/commands/login.ts</code> file and call it inside the <code class="language-plaintext highlighter-rouge">run</code> function.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Command</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@oclif/core</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">connectWallet</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../lib/connectWallet</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Login</span> <span class="kd">extends</span> <span class="nx">Command</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ü¶Å Connect your Metamask wallet to the faucet CLI</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">static</span> <span class="nx">examples</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">faucet-cli login</span><span class="dl">"</span><span class="p">];</span>

  <span class="k">async</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">connectWallet</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Let‚Äôs build the code and test it out.</p> <p><img src="https://imgur.com/OSbXO8A.png" alt="https://imgur.com/OSbXO8A.png"/></p> <p>As you can see the inquirer package returns an object with the key as the name of the prompt and the value as the answer.</p> <p>Let‚Äôs add a console log that says that the user won‚Äôt be able to use the request command if they don‚Äôt connect their wallet.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">connectWallet</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">inquirer</span>
    <span class="p">.</span><span class="nx">prompt</span><span class="p">([</span>
      <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">openBrowser</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">confirm</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Would you like to open the browser to connect wallet?</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">answer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">answer</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
          <span class="dl">"</span><span class="s2">You won't be able to request testnet tokens if you don't connect your wallet.</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connectWallet</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs now start building the cool part of the CLI, authenticating the user ü¶Ñ.</p> <p>We need to first need a few packages:</p> <ul> <li><a href="https://www.npmjs.com/package/express"><code class="language-plaintext highlighter-rouge">express</code></a>, to start a local server at port <code class="language-plaintext highlighter-rouge">9991</code> to handle the authentication.</li> <li><a href="https://www.npmjs.com/package/open"><code class="language-plaintext highlighter-rouge">open</code></a>, to open links in the browser from the cli.</li> <li><a href="https://www.npmjs.com/package/chalk"><code class="language-plaintext highlighter-rouge">chalk</code></a>, to colorize the console output.</li> </ul> <p>To install all of the above packages, run the following command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add express open chalk@4.1.2
</code></pre></div></div> <p>We are using the <a href="https://github.com/chalk/chalk/releases/tag/v4.1.2">v4.1.2</a> of chalk as <a href="https://github.com/chalk/chalk/releases/tag/v5.0.0">v5</a> of chalk is complete ESM module. As we are using TypeScript, it is better to stay on the v4.1.2.</p> <p>As we are using Typescript, we need also to install the TypeScript declarations for the above packages. <code class="language-plaintext highlighter-rouge">chalk</code> and <code class="language-plaintext highlighter-rouge">open</code> come with in-built TypeScript declarations. So we need to just install the TypeScript declarations for the <code class="language-plaintext highlighter-rouge">express</code> package.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/express
</code></pre></div></div> <p>Let‚Äôs start a local express application when the user chooses <code class="language-plaintext highlighter-rouge">Yes</code> for the prompt.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">open</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">open</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">connectWallet</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">inquirer</span>
    <span class="p">.</span><span class="nx">prompt</span><span class="p">([</span>
      <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">openBrowser</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">confirm</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Would you like to open the browser to connect wallet?</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">answer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">answer</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
          <span class="dl">"</span><span class="s2">You won't be able to request testnet tokens if you don't connect your wallet.</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">try</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

        <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
        <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

        <span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">9991</span><span class="p">);</span>

        <span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>

        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>

        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connectWallet</span><span class="p">;</span>
</code></pre></div></div> <p>üëÄ We have to change some code in the website. So let‚Äôs head back to the <code class="language-plaintext highlighter-rouge">web</code> folder and open the <code class="language-plaintext highlighter-rouge">pages/index.tsx</code> file. Let‚Äôs replace the code where we were showing the user‚Äôs wallet address after they have connected theirs to redirecting the user to the local express‚Äôs <code class="language-plaintext highlighter-rouge">/callback</code> with the address query parameter.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="kd">type</span> <span class="p">{</span> <span class="nx">NextPage</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span>
  <span class="nx">useAddress</span><span class="p">,</span>
  <span class="nx">useMetamask</span><span class="p">,</span>
  <span class="nx">useCoinbaseWallet</span><span class="p">,</span>
  <span class="nx">useWalletConnect</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@thirdweb-dev/react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/router</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Home</span><span class="p">:</span> <span class="nx">NextPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">connectWithCoinbaseWallet</span> <span class="o">=</span> <span class="nx">useCoinbaseWallet</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">connectWithMetamask</span> <span class="o">=</span> <span class="nx">useMetamask</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">connectWithWalletConnect</span> <span class="o">=</span> <span class="nx">useWalletConnect</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">useAddress</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">useRouter</span><span class="p">();</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">`http://localhost:9991/callback?address=</span><span class="p">${</span><span class="nx">address</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"flex min-h-screen w-full flex-col items-center justify-center gap-4 bg-gray-50"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">connectWithCoinbaseWallet</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"w-64 rounded-full bg-blue-600 py-2 font-medium text-white transition-all duration-75 hover:bg-blue-500"</span>
        <span class="p">&gt;</span>
          Connect Coinbase Wallet
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">connectWithMetamask</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"w-64 rounded-full bg-blue-600 py-2 font-medium text-white transition-all duration-75 hover:bg-blue-500"</span>
        <span class="p">&gt;</span>
          Connect MetaMask
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span>
          <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">connectWithWalletConnect</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="s">"w-64 rounded-full bg-blue-600 py-2 font-medium text-white transition-all duration-75 hover:bg-blue-500"</span>
        <span class="p">&gt;</span>
          Connect WalletConnect
        <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Home</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs now try to open the <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> in the browser and console log the user‚Äôs wallet address when he successfully connected his wallet.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">open</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">open</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">connectWallet</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">inquirer</span>
    <span class="p">.</span><span class="nx">prompt</span><span class="p">([</span>
      <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">openBrowser</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">confirm</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Would you like to open the browser to connect wallet?</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">answer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">answer</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
          <span class="dl">"</span><span class="s2">You won't be able to request testnet tokens if you don't connect your wallet.</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">try</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

        <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
        <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

        <span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">9991</span><span class="p">);</span>

        <span class="kd">let</span> <span class="na">resolve</span><span class="p">:</span> <span class="kr">any</span><span class="p">;</span>

        <span class="kd">const</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">_resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">resolve</span> <span class="o">=</span> <span class="nx">_resolve</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="c1">// get the address query param which is been sent by the website and redirecting the user to the done page.</span>
        <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
          <span class="dl">"</span><span class="s2">/callback</span><span class="dl">"</span><span class="p">,</span>
          <span class="k">async</span> <span class="p">(</span><span class="na">req</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="na">res</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000/done</span><span class="dl">"</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">);</span>

        <span class="c1">// opening the main website in browser</span>
        <span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">);</span>

        <span class="c1">// grabbing the address from the query param</span>
        <span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">p</span><span class="p">;</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span>

        <span class="c1">// closing the server as we don't want it to run forever</span>
        <span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>

        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>

        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connectWallet</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs test it out by starting the website with the <code class="language-plaintext highlighter-rouge">yarn dev</code> command. Make sure that you are present in the <code class="language-plaintext highlighter-rouge">web</code> folder before running this command.</p> <p>Let‚Äôs also compile the TypeScript code of the CLI into JavaScript by using the <code class="language-plaintext highlighter-rouge">yarn build</code> command. Make sure that you are present in the <code class="language-plaintext highlighter-rouge">cli</code> folder before running this command.</p> <p>Let‚Äôs now finally test the login command by running the <code class="language-plaintext highlighter-rouge">./bin/run login</code> command while being there in the <code class="language-plaintext highlighter-rouge">cli</code> directory.</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/w-aUXaZueLE" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <p>üëÄ We are missing out on something‚Ä¶</p> <p>We don‚Äôt want the user to connect their wallet every single time they use our CLI to request testnet tokens. So let‚Äôs store the user‚Äôs wallet address in a local file that lives in the user‚Äôs root directory. The path of the config file (<code class="language-plaintext highlighter-rouge">config.json</code>) would be something like this <code class="language-plaintext highlighter-rouge">&lt;user's-root-dir&gt;/.thw-faucet-cli/config.json</code>. The structure of content inside the <code class="language-plaintext highlighter-rouge">config.json</code> would be something like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"address"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0x0"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Create a new folder named <code class="language-plaintext highlighter-rouge">utils</code> and create a new file under it named <code class="language-plaintext highlighter-rouge">saveAddress.ts</code>. This file would contain the logic for creating a new file and then writing the user‚Äôs wallet address to it.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">fs</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">os</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">os</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">configFilePath</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../constants/constants</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">saveAddress</span> <span class="o">=</span> <span class="p">(</span><span class="nx">address</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdirSync</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">os</span><span class="p">.</span><span class="nx">homedir</span><span class="p">()}</span><span class="s2">/.thw-faucet-cli`</span><span class="p">);</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">configFilePath</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">address</span><span class="p">:</span> <span class="nx">address</span> <span class="p">}));</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">saveAddress</span><span class="p">;</span>
</code></pre></div></div> <p>I have created a new file named <code class="language-plaintext highlighter-rouge">constants/constants.ts</code> which contains the path of the config file. I did this because we are going to be using the path of the file in multiple places.</p> <p>Let‚Äôs import the <code class="language-plaintext highlighter-rouge">saveAddress</code> function into the <code class="language-plaintext highlighter-rouge">lib/connectWallet.ts</code> file and call it along with the user‚Äôs wallet address as the parameter.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">express</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">open</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">open</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">chalk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">chalk</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">saveAddress</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/saveAddress</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">connectWallet</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">inquirer</span>
    <span class="p">.</span><span class="nx">prompt</span><span class="p">([</span>
      <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">openBrowser</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">confirm</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Would you like to open the browser to connect wallet?</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">default</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">])</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">answer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">answer</span><span class="p">.</span><span class="nx">openBrowser</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
          <span class="dl">"</span><span class="s2">You won't be able to request testnet tokens if you don't connect your wallet.</span><span class="dl">"</span>
        <span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">try</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="na">app</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Application</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

        <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
        <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

        <span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">9991</span><span class="p">);</span>

        <span class="kd">let</span> <span class="na">resolve</span><span class="p">:</span> <span class="kr">any</span><span class="p">;</span>

        <span class="kd">const</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">_resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">resolve</span> <span class="o">=</span> <span class="nx">_resolve</span><span class="p">;</span>
        <span class="p">});</span>

        <span class="c1">// get the address query param which is been sent by the website and redirecting the user to the done page.</span>
        <span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
          <span class="dl">"</span><span class="s2">/callback</span><span class="dl">"</span><span class="p">,</span>
          <span class="k">async</span> <span class="p">(</span><span class="na">req</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="na">res</span><span class="p">:</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000/done</span><span class="dl">"</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">);</span>

        <span class="c1">// opening the main website in browser</span>
        <span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">);</span>

        <span class="c1">// grabbing the address from the query param</span>
        <span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">p</span><span class="p">;</span>

        <span class="c1">// storing the user's address locally in the config file</span>
        <span class="nx">saveAddress</span><span class="p">(</span><span class="nx">code</span> <span class="k">as</span> <span class="kr">string</span><span class="p">);</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
          <span class="nx">chalk</span><span class="p">.</span><span class="nx">greenBright</span><span class="p">(</span>
            <span class="s2">`\nYou have successfully connected your wallet to the faucet CLI!\nWallet address: </span><span class="p">${</span><span class="nx">code</span><span class="p">}</span><span class="s2">`</span>
          <span class="p">)</span>
        <span class="p">);</span>

        <span class="c1">// closing the server as we don't want it to run forever</span>
        <span class="nx">server</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>

        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>

        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connectWallet</span><span class="p">;</span>
</code></pre></div></div> <p>If the user has logged in once and the address has been saved then if the user tried to log in again, then it would be a problem ü§î. So let‚Äôs first check if the <code class="language-plaintext highlighter-rouge">config.json</code> file exists or not. If it exists then call the <code class="language-plaintext highlighter-rouge">connectWallet</code> function or else console log that the user is already logged in.</p> <p>Let‚Äôs create a new file named <code class="language-plaintext highlighter-rouge">utils/getToken.ts</code> which contains the logic for getting the token which is been stored in the local file (<code class="language-plaintext highlighter-rouge">config.json</code>).</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">fs</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">configFilePath</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../constants/constants</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">getToken</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">configFilePath</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">config</span><span class="p">.</span><span class="nx">address</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">getToken</span><span class="p">;</span>
</code></pre></div></div> <p>We are returning <code class="language-plaintext highlighter-rouge">null</code> if the <code class="language-plaintext highlighter-rouge">address</code> key in the <code class="language-plaintext highlighter-rouge">config.json</code> file doesn‚Äôt exist and the value of the <code class="language-plaintext highlighter-rouge">address</code> key if it exists.</p> <p>Let‚Äôs import the <code class="language-plaintext highlighter-rouge">getToken</code> function into the <code class="language-plaintext highlighter-rouge">src/commands/login.ts</code> file and call it.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Command</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@oclif/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">chalk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">chalk</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">connectWallet</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../lib/connectWallet</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">getToken</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/getToken</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Login</span> <span class="kd">extends</span> <span class="nx">Command</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ü¶Å Connect your Metamask wallet to the faucet CLI</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">static</span> <span class="nx">examples</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">faucet-cli login</span><span class="dl">"</span><span class="p">];</span>

  <span class="k">async</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// checking if the user is already logged in or not</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">getToken</span><span class="p">()</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">You are already logged in!</span><span class="dl">"</span><span class="p">));</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">connectWallet</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Let‚Äôs test it out üëÄ</p> <p><img src="https://imgur.com/847lRJj.png" alt=""/></p> <p>üéâ Woohoo! We have successfully made the login command. Phew! That was long. Let‚Äôs take a coffee break ‚òï.</p> <p><img src="https://c.tenor.com/2KcNT1aGdNEAAAAC/coffee-need.gif" alt=""/></p> <p>Let‚Äôs back to work now üöÄ!</p> <h2 id="-building-request-command">üö∞ Building request command</h2> <p>Let‚Äôs start building the main core command of the CLI, the <code class="language-plaintext highlighter-rouge">request</code> command.</p> <h3 id="Ô∏è-workflow-of-the-request-command">üë∑‚Äç‚ôÇÔ∏è Workflow of the request command</h3> <p>Let‚Äôs understand the workflow of the request command:</p> <ul> <li>The user first uses the <code class="language-plaintext highlighter-rouge">request</code> command, we would check if the user is logged in or not via the <code class="language-plaintext highlighter-rouge">getToken</code> function.</li> <li>If the user is not logged in, then we console log saying that you need to be logged in to use this command.</li> <li>If the user is logged in, then send a request to the backend with the specified network (for this tutorial I am going to be Rinkeby and Polygon Mumbai testnet networks)</li> <li>The backend would use web3.js and ethers to send the testnet tokens to the user and it would return with the transaction hash in the response.</li> </ul> <p>Let‚Äôs use Oclif‚Äôs CLI to generate a new command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx oclif generate <span class="nb">command </span>request
</code></pre></div></div> <p>As I have mentioned before, we would not be writing any kinds of test in this tutorial. So let‚Äôs delete the generated <code class="language-plaintext highlighter-rouge">test</code> folder again.</p> <p>Go ahead and open the <code class="language-plaintext highlighter-rouge">src/commands/request.ts</code> file and let‚Äôs clean the boilerplate code.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Command</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@oclif/core</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Request</span> <span class="kd">extends</span> <span class="nx">Command</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">üö∞ Request for testnet tokens</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">async</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Let‚Äôs use the inquirer package to prompt the user with the supported testnet networks. In this tutorial, I would be using Rinkeby and Polygon Mumbai. Feel free to add any testnet network in which you have a sufficient amount of tokens to build a faucet out of it.</p> <p>Let‚Äôs create a file named <code class="language-plaintext highlighter-rouge">src/data/questions.ts</code> which would contain an array with all the questions which would be prompted to the user. I have created another file named <code class="language-plaintext highlighter-rouge">src/data/networks.ts</code> which would contain an array with all the supported testnet networks.</p> <p><code class="language-plaintext highlighter-rouge">src/data/networks.ts</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">networks</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">mumbai</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">rinkeby</span><span class="dl">"</span><span class="p">];</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">networks</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">src/data/questions.ts</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">networks</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./networks</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">questions</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">list</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">network</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">message</span><span class="p">:</span>
      <span class="dl">"</span><span class="s2">ü¶Ñ choose the testnet network on which you want to request the tokens</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">choices</span><span class="p">:</span> <span class="nx">networks</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">];</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">questions</span><span class="p">;</span>
</code></pre></div></div> <p>Let‚Äôs import the <code class="language-plaintext highlighter-rouge">questions</code> array in the <code class="language-plaintext highlighter-rouge">src/commands/request.ts</code> file and use the inquirer package to create a prompt out of it.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Command</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@oclif/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">questions</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../data/questions</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Request</span> <span class="kd">extends</span> <span class="nx">Command</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">üö∞ Request for testnet tokens</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">async</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">inquirer</span><span class="p">.</span><span class="nx">prompt</span><span class="p">(</span><span class="nx">questions</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">answers</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>üëÄ Oh wait‚Ä¶ We forgot to check whether the user is logged in or not firstly. Let‚Äôs import the <code class="language-plaintext highlighter-rouge">getToken</code> function into the <code class="language-plaintext highlighter-rouge">src/commands/request.ts</code> file and call it.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Command</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@oclif/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">chalk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">chalk</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">getToken</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/getToken</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">questions</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../data/questions</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Request</span> <span class="kd">extends</span> <span class="nx">Command</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">üö∞ Request for testnet tokens</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">async</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">getToken</span><span class="p">()</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
        <span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="p">(</span>
          <span class="dl">"</span><span class="se">\n</span><span class="s2">You need to be logged in first to use this command!</span><span class="se">\n</span><span class="s2">Use `faucet-cli login` command to login.</span><span class="dl">"</span>
        <span class="p">)</span>
      <span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">inquirer</span><span class="p">.</span><span class="nx">prompt</span><span class="p">(</span><span class="nx">questions</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">answers</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="-building-the-backend">‚ú® Building the backend</h1> <p>Let‚Äôs now start building the backend ü¶Ñ.</p> <p>Create a new folder named <code class="language-plaintext highlighter-rouge">server</code> in the root directory.</p> <p>Let‚Äôs initialize a new npm project by using the <code class="language-plaintext highlighter-rouge">yarn init -y</code> command. Make sure to run <code class="language-plaintext highlighter-rouge">cd server</code>, if you are present in the root directory. This should generate a <code class="language-plaintext highlighter-rouge">package.json</code> file.</p> <p>Let‚Äôs edit the <code class="language-plaintext highlighter-rouge">package.json</code> file a bit:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"server"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.0.1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dist/index.js"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MIT"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Let‚Äôs now add the packages which we would need to build the backend:</p> <ul> <li><a href="https://www.npmjs.com/package/express"><code class="language-plaintext highlighter-rouge">express</code></a>, as our backend framework</li> <li><a href="https://www.npmjs.com/package/web3"><code class="language-plaintext highlighter-rouge">web3</code></a> and <a href="https://www.npmjs.com/package/ethers"><code class="language-plaintext highlighter-rouge">ethers</code></a>, as our blockchain library</li> <li><a href="https://www.npmjs.com/package/dotenv"><code class="language-plaintext highlighter-rouge">dotenv</code></a>, to read the environment variables from the <code class="language-plaintext highlighter-rouge">.env</code> file</li> </ul> <p>To install the above packages, run the following command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add express web3 ethers dotenv
</code></pre></div></div> <p>As we are using TypeScript, we would also need to install a few more packages as dev dependencies:</p> <ul> <li><code class="language-plaintext highlighter-rouge">@types/express</code>, type declarations for <code class="language-plaintext highlighter-rouge">express</code></li> <li><code class="language-plaintext highlighter-rouge">typescript</code>, to compile the TypeScript code</li> <li><code class="language-plaintext highlighter-rouge">ts-node</code>, to run the TypeScript code</li> <li><code class="language-plaintext highlighter-rouge">nodemon</code>, to run the reload the server on file changes</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">-D</span> @types/express typescript ts-node nodemon
</code></pre></div></div> <p>After the package has been installed, let‚Äôs create a new <code class="language-plaintext highlighter-rouge">tsconfig.json</code> where we defined the configuration to be followed by the TypeScript compiler.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"commonjs"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"dom"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"es2017"</span><span class="p">,</span><span class="w"> </span><span class="s2">"esnext.asynciterable"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"skipLibCheck"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sourceMap"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"removeComments"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitAny"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictNullChecks"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strictFunctionTypes"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitThis"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedLocals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noUnusedParameters"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noImplicitReturns"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"noFallthroughCasesInSwitch"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"allowSyntheticDefaultImports"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"esModuleInterop"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"emitDecoratorMetadata"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"experimentalDecorators"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"resolveJsonModule"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"exclude"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"node_modules"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"./src/**/*.ts"</span><span class="p">,</span><span class="w"> </span><span class="s2">"tsconfig.json"</span><span class="p">,</span><span class="w"> </span><span class="s2">"index.ts"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Let‚Äôs create a new file named <code class="language-plaintext highlighter-rouge">src/index.ts</code> and add the following code:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">express</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Express</span><span class="p">,</span> <span class="nx">Request</span><span class="p">,</span> <span class="nx">Response</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">app</span><span class="p">:</span> <span class="nx">Express</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">_req</span><span class="p">:</span> <span class="nx">Request</span><span class="p">,</span> <span class="nx">res</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Alive!</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`‚ö°Ô∏è[server]: Server is running at </span><span class="p">${</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>Let‚Äôs understand what does the above code does:</p> <ul> <li>We are importing the <code class="language-plaintext highlighter-rouge">express</code> package and creating an instance of <code class="language-plaintext highlighter-rouge">express</code> called <code class="language-plaintext highlighter-rouge">app</code>.</li> <li>We have defined a GET route <code class="language-plaintext highlighter-rouge">/</code> which returns a JSON object saying `status: ‚ÄòAlive!‚Äô.</li> <li>We have defined a middleware <code class="language-plaintext highlighter-rouge">app.use</code> which is used to parse the incoming request body as JSON and URL encoded.</li> <li>We are defining a <code class="language-plaintext highlighter-rouge">port</code> variable that would be used to listen to the port. The port which we are defining right now (in our case it‚Äôs <code class="language-plaintext highlighter-rouge">3000</code>) might vary from the port on which the server would run in the production mode. So, we are defining a <code class="language-plaintext highlighter-rouge">process.env.PORT</code> variable which would be used to listen to the port.</li> </ul> <p>Let‚Äôs add a few scripts in the <code class="language-plaintext highlighter-rouge">package.json</code>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc --watch"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"node dist/src/index.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/src/index.js"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Let‚Äôs now open two terminal windows, one for compiling the TypeScript code and the other for running and automatically reloading the server on file changes. Run <code class="language-plaintext highlighter-rouge">yarn watch</code> in one of the terminals and <code class="language-plaintext highlighter-rouge">yarn dev</code> in the other terminal. Make sure that you are present in the <code class="language-plaintext highlighter-rouge">server</code> directory, if not then run the <code class="language-plaintext highlighter-rouge">cd server</code> command before running the above commands.</p> <p><img src="https://imgur.com/nu1v6ji.png" alt=""/></p> <p>üëÄ We have just created a basic express application. Let‚Äôs now understand how can we test the routes which we have added. Currently, we only have one route but as our backend grows, we would have more and more routes.</p> <p>If you are using VSCode then there is a pretty good extension that can help you to test the API routes inside VSCode itself. Go ahead and search for <code class="language-plaintext highlighter-rouge">Thunder Client</code> in the extensions tab and install the one whose author is <code class="language-plaintext highlighter-rouge">Ranga Vadhineni</code>.</p> <p>After you have installed Thunder Client, you would see a thunder icon in the left sidebar.</p> <p><img src="https://imgur.com/IWAyZnh.png" alt=""/></p> <p>Click that thunder client and you would see a webview something like this:</p> <p><img src="https://imgur.com/56PS9C2.png" alt=""/></p> <p>Click the ‚ÄúNew Request‚Äù button and you would see a screen like this:</p> <p><img src="https://imgur.com/2qtTgLk.png" alt=""/></p> <p>If you have used Postman before then you would feel this interface is familiar.</p> <p>Let‚Äôs change the URL to <code class="language-plaintext highlighter-rouge">http://localhost:3000/</code> and click the ‚ÄúSend‚Äù button.</p> <p><img src="https://imgur.com/9EyPFvl.png" alt=""/></p> <p>You would see the response like this:</p> <p><img src="https://imgur.com/rvKbvOo.png" alt=""/></p> <p>Let‚Äôs now start building the actual <code class="language-plaintext highlighter-rouge">request</code> route which would send the tokens to the user.</p> <p>Let‚Äôs create a new folder called <code class="language-plaintext highlighter-rouge">controllers</code>, this folder would contain the core logic for the respective routes. Create a new file called <code class="language-plaintext highlighter-rouge">request.ts</code> under the <code class="language-plaintext highlighter-rouge">controllers</code> folder.</p> <p>It‚Äôs the time to interact with the blockchain using <code class="language-plaintext highlighter-rouge">ethers</code> and <code class="language-plaintext highlighter-rouge">web3.js</code> libraries.</p> <p><img src="https://c.tenor.com/siUF6_Z22eUAAAAC/wow.gif" alt=""/></p> <p>Let‚Äôs add the following code to the <code class="language-plaintext highlighter-rouge">src/controllers/request.ts</code> file, don‚Äôt worry we would be explaining the code:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Request</span><span class="p">,</span> <span class="nx">Response</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ethers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ethers</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">dotenv</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Web3</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">web3</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">constants</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../data/constants</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">chainId</span><span class="p">,</span> <span class="nx">txUrl</span><span class="p">,</span> <span class="nx">apiUrls</span><span class="p">,</span> <span class="nx">amount</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../data/networks</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">privateKey</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PRIVATE_KEY</span><span class="o">!</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">Wallet</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">:</span> <span class="nx">Request</span><span class="p">,</span> <span class="nx">res</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">address</span> <span class="o">=</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">httpsUrl</span> <span class="o">=</span> <span class="nx">apiUrls</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="o">!</span><span class="p">));</span>

  <span class="kd">var</span> <span class="nx">web3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Web3</span><span class="p">(</span><span class="k">new</span> <span class="nx">Web3</span><span class="p">.</span><span class="nx">providers</span><span class="p">.</span><span class="nx">HttpProvider</span><span class="p">(</span><span class="nx">httpsUrl</span><span class="o">!</span><span class="p">));</span>

  <span class="kd">const</span> <span class="nx">httpsProvider</span> <span class="o">=</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">getDefaultProvider</span><span class="p">(</span><span class="nx">httpsUrl</span><span class="p">);</span>

  <span class="kd">let</span> <span class="nx">nonce</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">httpsProvider</span><span class="p">.</span><span class="nx">getTransactionCount</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="dl">"</span><span class="s2">latest</span><span class="dl">"</span><span class="p">);</span>

  <span class="kd">let</span> <span class="nx">feeData</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">httpsProvider</span><span class="p">.</span><span class="nx">getFeeData</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">balance</span> <span class="o">=</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">fromWei</span><span class="p">(</span>
    <span class="c1">// @ts-ignore</span>
    <span class="k">await</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">constants</span><span class="p">[</span><span class="dl">"</span><span class="s2">fromAddress</span><span class="dl">"</span><span class="p">]),</span>
    <span class="dl">"</span><span class="s2">ether</span><span class="dl">"</span>
  <span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">web3</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">isAddress</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">address</span><span class="o">!</span><span class="p">))</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
      <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Invalid receiver address</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">invalidAddress</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// @ts-ignore</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">balance</span> <span class="o">&lt;</span> <span class="nx">amount</span><span class="p">?.</span><span class="kd">get</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">)</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
        <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Insufficient funds</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">insufficientFunds</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="na">nonce</span><span class="p">:</span> <span class="nx">nonce</span><span class="p">,</span>
        <span class="na">to</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span>
        <span class="na">maxPriorityFeePerGas</span><span class="p">:</span> <span class="nx">feeData</span><span class="p">[</span><span class="dl">"</span><span class="s2">maxPriorityFeePerGas</span><span class="dl">"</span><span class="p">],</span>
        <span class="na">maxFeePerGas</span><span class="p">:</span> <span class="nx">feeData</span><span class="p">[</span><span class="dl">"</span><span class="s2">maxFeePerGas</span><span class="dl">"</span><span class="p">],</span>
        <span class="c1">// @ts-ignore</span>
        <span class="na">value</span><span class="p">:</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">parseEther</span><span class="p">(</span><span class="nx">amount</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">)),</span>
        <span class="na">gasLimit</span><span class="p">:</span> <span class="mi">30000</span><span class="p">,</span>
        <span class="na">chainId</span><span class="p">:</span> <span class="nx">chainId</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">)),</span>
      <span class="p">};</span>

      <span class="c1">// @ts-ignore</span>
      <span class="kd">const</span> <span class="nx">signedTx</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">signTransaction</span><span class="p">(</span><span class="nx">tx</span><span class="p">);</span>

      <span class="kd">const</span> <span class="nx">txHash</span> <span class="o">=</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">keccak256</span><span class="p">(</span><span class="nx">signedTx</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Precomputed txHash:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">txHash</span><span class="p">);</span>
      <span class="nx">httpsProvider</span><span class="p">.</span><span class="nx">sendTransaction</span><span class="p">(</span><span class="nx">signedTx</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>

      <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
        <span class="na">txLink</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">txUrl</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">))}</span><span class="s2">/</span><span class="p">${</span><span class="nx">txHash</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">request</span><span class="p">;</span>
</code></pre></div></div> <p><img src="https://c.tenor.com/f-maJKMFVRMAAAAC/kevin-hart-dst.gif" alt=""/></p> <p>Damn! That‚Äôs a lot of code. Let‚Äôs break it down:</p> <ul> <li>We are importing the <code class="language-plaintext highlighter-rouge">express</code> (along with the <code class="language-plaintext highlighter-rouge">Request</code> and <code class="language-plaintext highlighter-rouge">Response</code> types), <code class="language-plaintext highlighter-rouge">ethers</code>, <code class="language-plaintext highlighter-rouge">web3.js</code>, and <code class="language-plaintext highlighter-rouge">dotenv</code> libraries.</li> <li> <p>We are importing the <code class="language-plaintext highlighter-rouge">chainId</code> (Chain ID of the supported networks), <code class="language-plaintext highlighter-rouge">txUrl</code> (The URL of the blockchain explorer along with the <code class="language-plaintext highlighter-rouge">tx</code> route), <code class="language-plaintext highlighter-rouge">apiUrls</code> (URL of Alchemy project), <code class="language-plaintext highlighter-rouge">amount</code> (The amount of tokens to be sent on each network). Wait what‚Äôs this <code class="language-plaintext highlighter-rouge">data/network.ts</code> file now? What does it contain? The <code class="language-plaintext highlighter-rouge">data/networks.ts</code> basically contains a quite few hashmaps to map the network name with the properties mentioned above.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">dotenv</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">chainId</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">([</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">mumbai</span><span class="dl">"</span><span class="p">,</span> <span class="mi">80001</span><span class="p">],</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">rinkeby</span><span class="dl">"</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
<span class="p">]);</span>

<span class="kd">const</span> <span class="nx">txUrl</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">([</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">mumbai</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">https://mumbai.polygonscan.com/tx</span><span class="dl">"</span><span class="p">],</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">rinkeby</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">https://rinkeby.etherscan.io/tx</span><span class="dl">"</span><span class="p">],</span>
<span class="p">]);</span>

<span class="kd">const</span> <span class="nx">apiUrls</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">([</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">mumbai</span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL_MUMBAI</span><span class="p">],</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">rinkeby</span><span class="dl">"</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">ALCHEMY_API_URL_RINKEBY</span><span class="p">],</span>
<span class="p">]);</span>

<span class="kd">const</span> <span class="nx">amount</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">([</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">mumbai</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">],</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">rinkeby</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">0.1</span><span class="dl">"</span><span class="p">],</span>
<span class="p">]);</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">chainId</span><span class="p">,</span> <span class="nx">txUrl</span><span class="p">,</span> <span class="nx">apiUrls</span><span class="p">,</span> <span class="nx">amount</span> <span class="p">};</span>
</code></pre></div> </div> </li> <li>We configured the <code class="language-plaintext highlighter-rouge">dotenv</code> library to load the environment variables from the <code class="language-plaintext highlighter-rouge">.env</code> file.</li> <li> <p>We are creating a wallet using the <code class="language-plaintext highlighter-rouge">ethers</code> library using the private key. Wait whose private key is it? Is it the private key of the user? Nope! It‚Äôs the private key of a new metamask wallet which we are going to be creating now specifically for this faucet.</p> <blockquote> <p>If you have metamask then you can skip to step 5.</p> </blockquote> <ul> <li>To install the metamask extension, go ahead to <a href="https://metamask.io">Metamask</a> and install the extension.</li> <li> <p>After you have installed the extension, you would see a page something like this. Click get started.</p> <p><img src="https://imgur.com/CriKrTv.png" alt=""/></p> </li> <li> <p>Click on create a new wallet</p> <p><img src="https://imgur.com/kkFt2qW.png" alt=""/></p> </li> <li> <p>Type in the password for your Metamask account</p> <p><img src="https://imgur.com/yn6fTB3.png" alt=""/></p> </li> <li> <p>Metamask would give you a <strong>secret recovery phrase</strong> which makes it easy to recover your account. <strong>Never share your secret recovery phrase with anyone</strong>.</p> <p><img src="https://imgur.com/yq10GFB.png" alt=""/></p> </li> <li> <p>Let‚Äôs create a new wallet for this faucet specifically. Click on the icon of the metamask extension. You would see something like this.</p> <p><img src="https://imgur.com/pPiTfHS.png" alt=""/></p> </li> <li> <p>Click on the avatar of the account which is present on the top right.</p> <p><img src="https://imgur.com/jY3Jjck.png" alt=""/></p> </li> <li> <p>Select ‚ÄúCreate Account‚Äù. This should ask you for the name of the new wallet that you are going to create.</p> <p><img src="https://imgur.com/pDoRz7h.png" alt=""/></p> </li> <li> <p>After you have entered the name of the new wallet, click on the ‚ÄúCreate‚Äù button.</p> <p><img src="https://imgur.com/Uu4oYOb.png" alt=""/></p> </li> <li> <p>Let‚Äôs now export the private key of this wallet. Click on the three dots on the top right and then select ‚ÄúAccount details‚Äù.</p> <p><img src="https://imgur.com/SZxQbvP.png" alt=""/></p> </li> <li>Click on ‚ÄúExport private key‚Äù, and you would be asked for your metamask password. Enter that in copy the private key.</li> <li> <p>Create a new file called <code class="language-plaintext highlighter-rouge">.env</code> under the <code class="language-plaintext highlighter-rouge">server</code> folder and add the following text in that file.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRIVATE_KEY=&lt;add your private key over here&gt;
</code></pre></div> </div> </li> </ul> </li> <li> <p>We have then grabbed the API URL from the hashmaps of the <code class="language-plaintext highlighter-rouge">src/data/networks.ts</code> file. Wait what are these API URLs? These are the API URLs of our Alchemy project.</p> <ul> <li>If you don‚Äôt know have an account at Alchemy, you can create one at <a href="https://www.alchemy.com">Alchemy</a>.</li> <li> <p>After you have created the account head over to <a href="https://dashboard.alchemyapi.io">the dashboard</a> and create a new project. We would be creating two apps one for Rinkeby and one for Polygon Mumbai.</p> <p><img src="https://imgur.com/77AIeaY.png" alt=""/></p> <p><img src="https://imgur.com/AACBTq9.png" alt=""/></p> </li> <li> <p>After you have created the project, click on it and it would open the dashboard for that project and click on the ‚ÄúView key‚Äù</p> <p><img src="https://imgur.com/Kf4c2X7.png" alt=""/></p> </li> <li>Copy the HTTP API key and paste it into the <code class="language-plaintext highlighter-rouge">.env</code> file. The <code class="language-plaintext highlighter-rouge">.env</code> file would look something like this now:</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRIVATE_KEY=&lt;add your private key over here&gt;
ALCHEMY_API_URL_MUMBAI=&lt;add the alchemy api url for the polygon mumbai network over here&gt;
ALCHEMY_API_URL_RINKEBY=&lt;add the alchemy api url for the rinkeby network over here&gt;
</code></pre></div> </div> </li> <li> <p>We are checking whether the given wallet address is valid or not using the <code class="language-plaintext highlighter-rouge">web3.js</code> library.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">web3</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">isAddress</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">address</span><span class="o">!</span><span class="p">))</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
    <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Invalid receiver address</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">invalidAddress</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li> <p>We are also checking whether we have a sufficient amount of balance in the wallet or not.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">balance</span> <span class="o">&lt;</span> <span class="nx">amount</span><span class="p">?.</span><span class="kd">get</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">)</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
    <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Insufficient funds</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">insufficientFunds</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div> </div> </li> <li>We are then using the <code class="language-plaintext highlighter-rouge">ethers</code> library to send the tokens to the receiver.</li> </ul> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">type</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="na">nonce</span><span class="p">:</span> <span class="nx">nonce</span><span class="p">,</span>
  <span class="na">to</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span>
  <span class="na">maxPriorityFeePerGas</span><span class="p">:</span> <span class="nx">feeData</span><span class="p">[</span><span class="dl">"</span><span class="s2">maxPriorityFeePerGas</span><span class="dl">"</span><span class="p">],</span>
  <span class="na">maxFeePerGas</span><span class="p">:</span> <span class="nx">feeData</span><span class="p">[</span><span class="dl">"</span><span class="s2">maxFeePerGas</span><span class="dl">"</span><span class="p">],</span>
  <span class="c1">// @ts-ignore</span>
  <span class="na">value</span><span class="p">:</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">parseEther</span><span class="p">(</span><span class="nx">amount</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">)),</span>
  <span class="na">gasLimit</span><span class="p">:</span> <span class="mi">30000</span><span class="p">,</span>
  <span class="na">chainId</span><span class="p">:</span> <span class="nx">chainId</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">)),</span>
<span class="p">};</span>

<span class="c1">// @ts-ignore</span>
<span class="kd">const</span> <span class="nx">signedTx</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">signTransaction</span><span class="p">(</span><span class="nx">tx</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">txHash</span> <span class="o">=</span> <span class="nx">ethers</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nx">keccak256</span><span class="p">(</span><span class="nx">signedTx</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Precomputed txHash:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">txHash</span><span class="p">);</span>
<span class="nx">httpsProvider</span><span class="p">.</span><span class="nx">sendTransaction</span><span class="p">(</span><span class="nx">signedTx</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>

<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
  <span class="na">txLink</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="nx">txUrl</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">network</span><span class="p">))}</span><span class="s2">/</span><span class="p">${</span><span class="nx">txHash</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div> <p>Create a new file called <code class="language-plaintext highlighter-rouge">router.ts</code> under the <code class="language-plaintext highlighter-rouge">server</code> folder and add the following text in that file.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Router</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">request</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./controllers/request</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">();</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/request</span><span class="dl">"</span><span class="p">,</span> <span class="nx">request</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div> <p>Here we are importing the <code class="language-plaintext highlighter-rouge">request</code> controller from the <code class="language-plaintext highlighter-rouge">controllers</code> folder and creating a specific route for it (<code class="language-plaintext highlighter-rouge">/request</code>).</p> <p>Let‚Äôs now import <code class="language-plaintext highlighter-rouge">router</code> into the <code class="language-plaintext highlighter-rouge">src/index.ts</code> file and use the <code class="language-plaintext highlighter-rouge">app.use</code> method on <code class="language-plaintext highlighter-rouge">router</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">router</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./router</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">"</span><span class="s2">/api</span><span class="dl">"</span><span class="p">,</span> <span class="nx">router</span><span class="p">);</span>
</code></pre></div></div> <p>Let‚Äôs test the <code class="language-plaintext highlighter-rouge">/api/request</code> route but before testing, we need to get some testnet tokens into the account of the faucet CLI. Recently I have made a CLI get testnet tokens right away from the terminal so maybe it can help y‚Äôall üëÄ.</p> <p><a href="https://github.com/Kira272921/faucetli">GitHub repo</a></p> <p>If you don‚Äôt want to get the testnets tokens from the CLI, then you can get the testnet tokens from these faucets:</p> <ul> <li><a href="https://faucet.polygon.technology/">Polygon Mumbai faucet</a></li> <li><a href="https://faucets.chain.link/rinkeby">Rinkeby faucet</a></li> </ul> <p>After you have got a sufficient amount of testnet tokens, we can now test the <code class="language-plaintext highlighter-rouge">/api/request</code> route. Go ahead and open Thunder Client and change the API link to <code class="language-plaintext highlighter-rouge">http://localhost:3000/api/request</code> and change the HTTP request method to <code class="language-plaintext highlighter-rouge">POST</code>.</p> <p><img src="https://imgur.com/deOCeaI.png" alt=""/></p> <p>We need to also pass the following query parameters while sending the request:</p> <ul> <li><code class="language-plaintext highlighter-rouge">network</code> - The network on which the user wants the testnet token. In our case, it‚Äôs either <code class="language-plaintext highlighter-rouge">mumbai</code> or <code class="language-plaintext highlighter-rouge">rinkeby</code>.</li> <li><code class="language-plaintext highlighter-rouge">address</code> - The address of the receiver.</li> </ul> <p><img src="https://imgur.com/anGNMC9.png" alt=""/></p> <p>Let‚Äôs now send the request üöÄ!</p> <p><img src="https://imgur.com/JoLSg39.png" alt=""/></p> <p><img src="https://imgur.com/CBRXFqP.png" alt=""/></p> <p>üéâ Woohoo! It‚Äôs working like a charm</p> <h1 id="-integrating-the-backend-and-the-cli">üëÄ Integrating the backend and the CLI</h1> <p>Let‚Äôs now integrate the backend and the cli using the <a href="https://npmjs.com/package/axios"><code class="language-plaintext highlighter-rouge">axios</code></a> library. We would be calling the backend using axios and then console logging the transaction link into the terminal.</p> <p>Let‚Äôs create a new file called <code class="language-plaintext highlighter-rouge">src/lib/sendTokens.ts</code> under the <code class="language-plaintext highlighter-rouge">cli</code> folder. This file would be containing the core logic for calling the backend and error handling.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">ora</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ora</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">).</span><span class="k">default</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">chalk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">chalk</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">apiUrl</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../constants/constants</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">sendTokens</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">wallet</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">network</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">spinner</span> <span class="o">=</span> <span class="nx">ora</span><span class="p">(</span><span class="s2">`ü¶Ñ sending tokens to </span><span class="p">${</span><span class="nx">wallet</span><span class="p">}</span><span class="s2"> on </span><span class="p">${</span><span class="nx">network</span><span class="p">}</span><span class="s2">`</span><span class="p">).</span><span class="nx">start</span><span class="p">();</span>

  <span class="k">await</span> <span class="nx">axios</span>
    <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/request?address=</span><span class="p">${</span><span class="nx">wallet</span><span class="p">}</span><span class="s2">&amp;network=</span><span class="p">${</span><span class="nx">network</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="na">res</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">insufficientFunds</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">spinner</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span>
          <span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="p">(</span>
            <span class="s2">`üòø I'm out of funds! You can use the Chainlink Faucet until I get refilled. https://faucets.chain.link.\nDonate: 0x16aD561aC34818E2f314E2D1d5a777cC39f5E3aB`</span>
          <span class="p">)</span>
        <span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">invalidAddress</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">spinner</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="p">(</span><span class="s2">`ü§∑‚Äç‚ôÇÔ∏è The address provided is invalid`</span><span class="p">));</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">spinner</span><span class="p">.</span><span class="nx">succeed</span><span class="p">(</span>
            <span class="nx">chalk</span><span class="p">.</span><span class="nx">greenBright</span><span class="p">(</span>
              <span class="s2">`üéâ sent the tokens to </span><span class="p">${</span><span class="nx">wallet</span><span class="p">}</span><span class="s2"> on </span><span class="p">${</span><span class="nx">network</span><span class="p">}</span><span class="s2">, check </span><span class="p">${</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">txLink</span><span class="p">}</span><span class="s2"> to verify if the transaction was successful`</span>
            <span class="p">)</span>
          <span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="na">err</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">spinner</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="s2">`üòø </span><span class="p">${</span><span class="nx">err</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">sendTokens</span><span class="p">;</span>
</code></pre></div></div> <p>Woah! That‚Äôs a lot of code. Let‚Äôs break it down:</p> <ul> <li> <p>We are importing a package called <code class="language-plaintext highlighter-rouge">ora</code> by which we can create terminal spinners. To install <code class="language-plaintext highlighter-rouge">ora</code> run the following command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add ora@5.4.1
</code></pre></div> </div> <p>Why are we installing the v5.4.1 of ora? Because the latest version of ora is a pure ESM module and instead of changing a hell lot of code, we can just install the version of ora which isn‚Äôt pure ESM.</p> <p>Ora comes with in-built TypeScript declarations so there is no need to install separately for its types.</p> </li> <li> <p>We are importing the <code class="language-plaintext highlighter-rouge">axios</code> package and the <code class="language-plaintext highlighter-rouge">chalk</code> package. We have already installed the <code class="language-plaintext highlighter-rouge">chalk</code> package previously. So to install <code class="language-plaintext highlighter-rouge">axios</code> package run the following command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add axios
</code></pre></div> </div> </li> <li> <p>You might notice we are importing a variable called <code class="language-plaintext highlighter-rouge">apiUrl</code> from the <code class="language-plaintext highlighter-rouge">constants/constants.ts</code> file. The <code class="language-plaintext highlighter-rouge">apiUrl</code> variable is the base URL of the backend. As we didn‚Äôt deploy the backend till now so we would be using localhost.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">os</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">os</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">configFilePath</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">os</span><span class="p">.</span><span class="nx">homedir</span><span class="p">()}</span><span class="s2">/.thw-faucet-cli/config.json`</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="s2">`http://localhost:3000`</span><span class="p">;</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">configFilePath</span><span class="p">,</span> <span class="nx">apiUrl</span> <span class="p">};</span>
</code></pre></div> </div> </li> <li> <p>We are starting a spinner by calling the <code class="language-plaintext highlighter-rouge">ora</code> function and passing the message as <code class="language-plaintext highlighter-rouge">ü¶Ñ sending tokens to ${wallet} on ${network}</code>.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">spinner</span> <span class="o">=</span> <span class="nx">ora</span><span class="p">(</span><span class="s2">`ü¶Ñ sending tokens to </span><span class="p">${</span><span class="nx">wallet</span><span class="p">}</span><span class="s2"> on </span><span class="p">${</span><span class="nx">network</span><span class="p">}</span><span class="s2">`</span><span class="p">).</span><span class="nx">start</span><span class="p">();</span>
</code></pre></div> </div> </li> <li> <p>We are calling the backend with the <code class="language-plaintext highlighter-rouge">address</code> and <code class="language-plaintext highlighter-rouge">network</code> query parameters. We are then returning the transaction link which is sent along with the response when we call the backend.</p> </li> </ul> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="nx">axios</span>
  <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">apiUrl</span><span class="p">}</span><span class="s2">/request?address=</span><span class="p">${</span><span class="nx">wallet</span><span class="p">}</span><span class="s2">&amp;network=</span><span class="p">${</span><span class="nx">network</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">insufficientFunds</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">spinner</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span>
        <span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="p">(</span>
          <span class="s2">`üòø I'm out of funds! You can use the Chainlink Faucet until I get refilled. https://faucets.chain.link.\nDonate: 0x16aD561aC34818E2f314E2D1d5a777cC39f5E3aB`</span>
        <span class="p">)</span>
      <span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">invalidAddress</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">spinner</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="p">(</span><span class="s2">`ü§∑‚Äç‚ôÇÔ∏è The address provided is invalid`</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">spinner</span><span class="p">.</span><span class="nx">succeed</span><span class="p">(</span>
          <span class="nx">chalk</span><span class="p">.</span><span class="nx">greenBright</span><span class="p">(</span>
            <span class="s2">`üéâ sent the tokens to </span><span class="p">${</span><span class="nx">wallet</span><span class="p">}</span><span class="s2"> on </span><span class="p">${</span><span class="nx">network</span><span class="p">}</span><span class="s2">, check </span><span class="p">${</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">txLink</span><span class="p">}</span><span class="s2"> to verify if the transaction was successful`</span>
          <span class="p">)</span>
        <span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">spinner</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="s2">`üòø </span><span class="p">${</span><span class="nx">err</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div> <p>Let‚Äôs now import the <code class="language-plaintext highlighter-rouge">sendTokens</code> function into the <code class="language-plaintext highlighter-rouge">src/commands/request.ts</code> and call with along with the wallet address and the network parameters.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Command</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@oclif/core</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">inquirer</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">inquirer</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">chalk</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">chalk</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">sendTokens</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../lib/sendTokens</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">getToken</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../utils/getToken</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="nx">questions</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../data/questions</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Request</span> <span class="kd">extends</span> <span class="nx">Command</span> <span class="p">{</span>
  <span class="k">static</span> <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">üö∞ Request for testnet tokens</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">async</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">getToken</span><span class="p">()</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
        <span class="nx">chalk</span><span class="p">.</span><span class="nx">redBright</span><span class="p">(</span>
          <span class="dl">"</span><span class="se">\n</span><span class="s2">You need to be logged in first to use this command!</span><span class="se">\n</span><span class="s2">Use `faucet-cli login` command to login.</span><span class="dl">"</span>
        <span class="p">)</span>
      <span class="p">);</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">inquirer</span><span class="p">.</span><span class="nx">prompt</span><span class="p">(</span><span class="nx">questions</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">answers</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">sendTokens</span><span class="p">(</span><span class="nx">getToken</span><span class="p">(),</span> <span class="nx">answers</span><span class="p">.</span><span class="nx">network</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="-testing-the-entire-project">üß™ Testing the entire project</h1> <p>Let‚Äôs test it out üöÄ! Let me delete the <code class="language-plaintext highlighter-rouge">.thw-faucet-cli</code> folder from my root directory as I want to test the login command as well.</p> <p>Let‚Äôs first build the code of the cli by using the <code class="language-plaintext highlighter-rouge">yarn build</code> command. Open another terminal window cd into the server folder and run the <code class="language-plaintext highlighter-rouge">yarn dev</code> command. Open another terminal window cd into the web folder and run the <code class="language-plaintext highlighter-rouge">yarn dev</code> command.</p> <p>üò± Oh no! We have just found an issue the <code class="language-plaintext highlighter-rouge">login</code> command redirects to <code class="language-plaintext highlighter-rouge">localhost:3000</code> which we thought to be the port where the frontend would run but we have given that port to the backend so let‚Äôs do a quick fix in the backend code and change the port from <code class="language-plaintext highlighter-rouge">3000</code> to <code class="language-plaintext highlighter-rouge">8080</code>. We would also have to change the <code class="language-plaintext highlighter-rouge">apiUrl</code> variable in the <code class="language-plaintext highlighter-rouge">cli/src/constants/constants.ts</code> folder.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">os</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">os</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">configFilePath</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">os</span><span class="p">.</span><span class="nx">homedir</span><span class="p">()}</span><span class="s2">/.thw-faucet-cli/config.json`</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="s2">`http://localhost:8080/api`</span><span class="p">;</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">configFilePath</span><span class="p">,</span> <span class="nx">apiUrl</span> <span class="p">};</span>
</code></pre></div></div> <p>As we have changed some code in the cli folder, we would have to build the code again so let‚Äôs run the <code class="language-plaintext highlighter-rouge">yarn build</code> again.</p> <p><img src="https://imgur.com/D1gCRZQ.png" alt=""/></p> <p><img src="https://imgur.com/74XE9XW.png" alt=""/></p> <p>üéâ It‚Äôs working!!! LFG üöÄ</p> <h1 id="-deploying">üöÄ Deploying</h1> <p>Let‚Äôs now deploy the frontend and the backend and publish the entire cli to npmjs.</p> <h2 id="-deploying-the-frontend">üé® Deploying the frontend</h2> <p>Let‚Äôs deploy the frontend on <a href="https://vercel.com/">Vercel</a>. If you are building a Next.js application and want to deploy it, Vercel is the best option in my opinion.</p> <p>Let‚Äôs first create a initialize a git repository from the root directory of the project.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <p>Create a <a href="https://repo.new">new GitHub repository</a> and push the code to the repository.</p> <p>Head over to the <a href="https://vercel.com/dashboard">Vercel dashboard</a> and create a new project and edit the root directory from <code class="language-plaintext highlighter-rouge">./</code> to <code class="language-plaintext highlighter-rouge">web</code>.</p> <p><img src="https://imgur.com/XunPAf7.png" alt=""/></p> <p><img src="https://imgur.com/Cgdi1Y4.png" alt=""/></p> <p>Click on deploy and that‚Äôs it üéâ!</p> <h2 id="-deploying-the-backend">üöÑ Deploying the backend</h2> <p>We would be deploying the backend on <a href="https://railway.app/">Railway</a>. Create a new project and select ‚ÄúDeploy from GitHub repo‚Äù</p> <p><img src="https://imgur.com/4HGqGt2.png" alt=""/></p> <p>Select the GitHub repo and select add environment variables.</p> <p>This should create a new project for us. Open up that project you would first see that the deployment has failed, don‚Äôt worry we would fix that in a minute.</p> <p>Open the settings tab</p> <p><img src="https://imgur.com/k5q2vau.png" alt=""/></p> <p>We would have to change the scripts in the backend a bit:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"watch"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc --watch"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tsc"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ts-node src/index.ts"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"nodemon dist/src/index.js"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>We also need to add a file called <code class="language-plaintext highlighter-rouge">Procfile</code> which contains the start command. Create a file named <code class="language-plaintext highlighter-rouge">Procfile</code> under the <code class="language-plaintext highlighter-rouge">server</code> folder and add the following to that file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web: yarn start
</code></pre></div></div> <p>Push the code to the GitHub repo and this should railway should redeploy it for us.</p> <p>This should redeploy the latest commit again. You might see the deployment has failed again no worries we will fix it.</p> <p>Head over to the variables tab and bulk import the environment variables from the <code class="language-plaintext highlighter-rouge">.env</code> file. We would also need to change the root directory from <code class="language-plaintext highlighter-rouge">/</code> to <code class="language-plaintext highlighter-rouge">server</code>. Head over to the settings tab and scroll down a bit and change the root directory from <code class="language-plaintext highlighter-rouge">/</code> to <code class="language-plaintext highlighter-rouge">server</code> and add the start command as <code class="language-plaintext highlighter-rouge">yarn start</code>.</p> <p>That‚Äôs you have just deployed the backend on the railway! üéâ</p> <h2 id="-publishing-the-cli">üì¶ Publishing the CLI</h2> <p>Let‚Äôs now finally publish our CLI on npmjs. We would need to change the links of the backend and the frontend in the code of CLI. So let‚Äôs do that:</p> <ul> <li>In the <code class="language-plaintext highlighter-rouge">src/constants/constants.ts</code> change the backend URL from <code class="language-plaintext highlighter-rouge">localhost:8080</code> to the deployed URL of the backend.</li> <li>In the <code class="language-plaintext highlighter-rouge">src/lib/connectWallet.ts</code> change the frontend URL from <code class="language-plaintext highlighter-rouge">localhost:3000</code> to the deployed URL of the frontend.</li> </ul> <p>Let‚Äôs test the cli out for the last time.</p> <p><img src="https://imgur.com/ryLY9Ih.png" alt=""/></p> <p><img src="https://imgur.com/V76k4gh.png" alt=""/></p> <p><img src="https://imgur.com/VdVv0AA.png" alt=""/></p> <p>Woohoo! It‚Äôs working! üéâ</p> <p>Let‚Äôs now generate the README.md using oclif üëÄ. Run <code class="language-plaintext highlighter-rouge">yarn oclif readme</code> command. This should generate a README.md with the table of content of all the commands which we have created and their usage and descriptions.</p> <p>Let‚Äôs now publish it to npmjs by using the <code class="language-plaintext highlighter-rouge">npm publish</code> command. Woohoo! It‚Äôs finally done!</p> <p><img src="https://c.tenor.com/MkyiUsAp8t8AAAAM/tom-and-jerry-tom-the-cat.gif" alt=""/></p> <h1 id="-the-end">üëã The end</h1> <p>All those who have read the blog post until here deserve a big round of applause. Hope y‚Äôall have learned something new from this blog post</p> <p><img src="https://c.tenor.com/Sq7rY9NKKd4AAAAC/oscars-standing-ovation.gif" alt=""/></p> <h2 id="-links">üîó Links</h2> <ul> <li><a href="https://github.com/Kira272921/thw-faucet-cli">GitHub</a></li> <li><a href="https://www.npmjs.com/package/thw-faucet-cli">npmjs</a></li> <li><a href="https://thw-faucet-cli.vercel.app">Website</a></li> <li><a href="https://thw-faucet-cli-production.up.railway.app">Backend</a></li> </ul> <p>~ Happy building!</p>]]></content><author><name>Kira</name></author><category term="web3"/><category term="blockchain"/><category term="node-js"/><category term="cli"/><summary type="html"><![CDATA[The complete guide to building a faucet CLI using NodeJS.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://imgur.com/0qQxUt3.png"/><media:content medium="image" url="https://imgur.com/0qQxUt3.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to use Mongoose with Next.js for MongoDB?</title><link href="https://genicsblog.com/usman/how-to-use-mongoose-with-next-js-for-mongodb" rel="alternate" type="text/html" title="How to use Mongoose with Next.js for MongoDB?"/><published>2022-04-17T00:00:00+00:00</published><updated>2022-04-17T00:00:00+00:00</updated><id>https://genicsblog.com/usman/how-to-use-mongoose-with-nextjs-for-mongodb</id><content type="html" xml:base="https://genicsblog.com/usman/how-to-use-mongoose-with-next-js-for-mongodb"><![CDATA[<h1 id="hey-all-">Hey all! üëã</h1> <p>Next.js is an amazing full-stack framework and MongoDB is a great NoSQL database. Using them together will make an app super fast and awesome! In this post, we‚Äôll go ahead and set up the Mongoose ODM inside our Next.js app to make use of MongoDB!</p> <p>So let‚Äôs see how you can set up Mongoose in a Next.js app to connect and interact with your MongoDB database!</p> <h2 id="setting-up-mongoose-and-the-connection-string">Setting up mongoose and the connection string</h2> <p>In your Next.js project, to set up mongoose you simply have to install it as a dependency just as you do with Node.js.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i mongoose
</code></pre></div></div> <p>After installing <code class="language-plaintext highlighter-rouge">mongoose</code>, we‚Äôll create a folder called <code class="language-plaintext highlighter-rouge">utils</code> in our root and create a new file named <code class="language-plaintext highlighter-rouge">connectMongo.js</code> file.</p> <p>In this file, we will export a function that connects us to MongoDB.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650178314792/H0ZTJa7ma.png" alt="image.png"/></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">mongoose</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">connectMongo</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_URI</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connectMongo</span><span class="p">;</span>
</code></pre></div></div> <p>Also create a file named <code class="language-plaintext highlighter-rouge">.env.local</code> in the root of your project to store the connection URI in your environment variable and hide it from the main code.</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># I am using MongoDB locally but you can use MongoDB Atlas also if you want
</span><span class="n">MONGO_URI</span><span class="o">=</span><span class="s">"mongodb://localhost:27017/mongoose_nextjs_demo"</span>
</code></pre></div></div> <h2 id="create-a-basic-mongoose-model">Create a basic mongoose model</h2> <p>Now that <code class="language-plaintext highlighter-rouge">mongoose</code> is set up successfully in our Next.js project, the rest of the work is quite similar to a Node.js app. I personally like to create a folder called <code class="language-plaintext highlighter-rouge">models</code> in the root of my project and create my model files there, just like a normal node.js app.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650178623079/FI6HSWVCK.png" alt="image.png"/></p> <p>So now we‚Äôll create a file named <code class="language-plaintext highlighter-rouge">testModel.js</code> in our <code class="language-plaintext highlighter-rouge">models</code> folder where we‚Äôll create our mongoose model.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Schema</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">models</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">testSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">Test</span> <span class="o">=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Test</span> <span class="o">||</span> <span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test</span><span class="dl">'</span><span class="p">,</span> <span class="nx">testSchema</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Test</span><span class="p">;</span>
</code></pre></div></div> <blockquote> <p>IMPORTANT: Notice how we use <code class="language-plaintext highlighter-rouge">models.Test</code> and then the logical OR operator and then use the <code class="language-plaintext highlighter-rouge">model</code> function by mongoose. We do that because we don‚Äôt want to create a new model every single time we hit an API route in Next.js. If you don‚Äôt do that and just go with <code class="language-plaintext highlighter-rouge">model('Test', testSchema)</code>, you might face an error that would prevent creating/updating etc.</p> </blockquote> <h2 id="using-mongoose-in-api-routes">Using mongoose in API routes</h2> <p>Now that we have our model created, we can use it to see it in action!</p> <p>Next.js is a full-stack framework, and so it also provides a node environment where we can run Node.js back-end code easily and integrate that with the frontend.</p> <p>In the <code class="language-plaintext highlighter-rouge">pages/api</code> folder, we can create a file or folder that will ultimately create an API route and we can write back-end code in that file and call it as a REST API.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650183014182/dxFl9KmIN.png" alt="image.png"/></p> <p>For this demo, I created a folder <code class="language-plaintext highlighter-rouge">test</code> and a file <code class="language-plaintext highlighter-rouge">add.js</code> inside of it which gives the path <code class="language-plaintext highlighter-rouge">/api/test/add</code>.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">connectMongo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../../utils/connectMongo</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Test</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../../models/testModel</span><span class="dl">'</span><span class="p">;</span>

<span class="cm">/**
 * @param {import('next').NextApiRequest} req
 * @param {import('next').NextApiResponse} res
 */</span>
<span class="k">export</span> <span class="k">default</span> <span class="k">async</span> <span class="kd">function</span> <span class="nx">addTest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTING TO MONGO</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">connectMongo</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTED TO MONGO</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CREATING DOCUMENT</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">test</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Test</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CREATED DOCUMENT</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">test</span> <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="nx">error</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Here, we import the <code class="language-plaintext highlighter-rouge">connectMongo</code> function and our <code class="language-plaintext highlighter-rouge">Test</code> model that we created from the respective files. And the big comment I have at the top is <a href="https://jsdoc.app/">JSDoc</a> which can be used to provide autocomplete and typing in the IDE. You can omit it if you want.</p> <p>Finally, the code is simple and straightforward, you can use the normal <code class="language-plaintext highlighter-rouge">mongoose</code> style code to create a new document. By getting the data from <code class="language-plaintext highlighter-rouge">req.body</code>.</p> <p>You can test it from the <a href="https://www.thunderclient.com/">Thunder Client</a> extension in VS Code, <a href="https://www.postman.com/">Postman</a> or <a href="https://insomnia.rest/download">Insomnia</a>. Whatever you wish! I like to use Thunder Client.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650183454458/zEdrw_Mvy.png" alt="image.png"/></p> <h2 id="create-new-document-from-front-end">Create new document from front-end</h2> <p>Now that we have our back-end API created and we have verified that it‚Äôs working, we can quickly write some front-end code to make it usable in our app.</p> <p>On the homepage inside the <code class="language-plaintext highlighter-rouge">index.js</code> file, I changed the file so that when we click the button, a new document will get added to the database.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Head</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/head</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Image</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/image</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../styles/Home.module.css</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">createTest</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">randomNum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/test/add</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
        <span class="na">name</span><span class="p">:</span> <span class="s2">`Test </span><span class="p">${</span><span class="nx">randomNum</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
        <span class="na">email</span><span class="p">:</span> <span class="s2">`test</span><span class="p">${</span><span class="nx">randomNum</span><span class="p">}</span><span class="s2">@test.com`</span><span class="p">,</span>
      <span class="p">}),</span>
    <span class="p">});</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Create Next App<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">'description'</span> <span class="na">content</span><span class="p">=</span><span class="s">'Generated by create next app'</span> <span class="p">/&gt;</span>
        <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="p">=</span><span class="s">'icon'</span> <span class="na">href</span><span class="p">=</span><span class="s">'/favicon.ico'</span> <span class="p">/&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Head</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nt">main</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">main</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">createTest</span><span class="si">}</span><span class="p">&gt;</span>Create Test<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&gt;</span>
          Welcome to <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="p">=</span><span class="s">'https://nextjs.org'</span><span class="p">&gt;</span>Next.js!<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">description</span><span class="si">}</span><span class="p">&gt;</span>
          Get started by editing<span class="si">{</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="si">}</span>
          <span class="p">&lt;</span><span class="nt">code</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">code</span><span class="si">}</span><span class="p">&gt;</span>pages/index.js<span class="p">&lt;/</span><span class="nt">code</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">grid</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nt">footer</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">footer</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span>
          <span class="na">href</span><span class="p">=</span><span class="s">'https://vercel.com?utm_source=create-next-app&amp;utm_medium=default-template&amp;utm_campaign=create-next-app'</span>
          <span class="na">target</span><span class="p">=</span><span class="s">'_blank'</span>
          <span class="na">rel</span><span class="p">=</span><span class="s">'noopener noreferrer'</span>
        <span class="p">&gt;</span>
          Powered by<span class="si">{</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="si">}</span>
          <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">logo</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Image</span> <span class="na">src</span><span class="p">=</span><span class="s">'/vercel.svg'</span> <span class="na">alt</span><span class="p">=</span><span class="s">'Vercel Logo'</span> <span class="na">width</span><span class="p">=</span><span class="si">{</span><span class="mi">72</span><span class="si">}</span> <span class="na">height</span><span class="p">=</span><span class="si">{</span><span class="mi">16</span><span class="si">}</span> <span class="p">/&gt;</span>
          <span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="fetch-and-display-documents">Fetch and display documents</h2> <p>Now it‚Äôs time to use Next.js‚Äôs best feature! Server-Side Rendering. We can use SSR in Next.js to easily run back-end Node.js code as we want and the data can be easily accessible through the <code class="language-plaintext highlighter-rouge">props</code> to the page.</p> <p>In the <code class="language-plaintext highlighter-rouge">index.js</code> file itself, we‚Äôll import the <code class="language-plaintext highlighter-rouge">connectMongo</code> and <code class="language-plaintext highlighter-rouge">Test</code> again and use them inside the <code class="language-plaintext highlighter-rouge">getServerSideProps</code> function that we have to export like this üëá</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">connectMongo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../utils/connectMongo</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Test</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../models/testModel</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">getServerSideProps</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTING TO MONGO</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">await</span> <span class="nx">connectMongo</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">CONNECTED TO MONGO</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">FETCHING DOCUMENTS</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">tests</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Test</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">FETCHED DOCUMENTS</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">tests</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">tests</span><span class="p">)),</span>
      <span class="p">},</span>
    <span class="p">};</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">notFound</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>In this function, we can easily fetch any data we want and it will be done on the server and then we have to <strong>return</strong> it as <code class="language-plaintext highlighter-rouge">props</code>. That will be accessible to the page. You can read about <a href="https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props"><code class="language-plaintext highlighter-rouge">getServerSideProps</code> on the Next.js docs</a></p> <blockquote> <p>IMPORTANT: Make sure to sanitize the <code class="language-plaintext highlighter-rouge">tests</code> variable with <code class="language-plaintext highlighter-rouge">JSON.parse(JSON.stringify(tests))</code> because it contains <code class="language-plaintext highlighter-rouge">ObjectID</code> from MongoDB instead of a normal string. This trick converts it into a string that can be passed in the <code class="language-plaintext highlighter-rouge">return</code> object.</p> </blockquote> <p>That‚Äôs it! After we‚Äôre done fetching the data we can easily display it by accessing it through the props on our page and we can use it however we want. In this case we‚Äôll map over that data to output every document like so</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">({</span> <span class="nx">tests</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// ...</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="c1">//   ...</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">grid</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="si">{</span><span class="nx">tests</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">test</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">a</span>
          <span class="na">href</span><span class="p">=</span><span class="s">"https://nextjs.org/docs"</span>
          <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">test</span><span class="p">.</span><span class="nx">_id</span><span class="si">}</span>
          <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">card</span><span class="si">}</span>
        <span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">test</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span> <span class="ni">&amp;rarr;</span><span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">test</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">))</span><span class="si">}</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="c1">// ...</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Finally, this is what our page looks like:</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1650184603173/bbdiBR1rw.png" alt="image.png"/></p> <p>I have explained everything deeply in the YouTube tutorial below üëáüëá</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/cM0pA50R20M" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <p>I hope this post helped you successfully set up Mongoose in your Next.js app. If it did, please leave a like!</p> <p>Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!</p> <p><strong>Connect with me on my <a href="https://youtube.com/MaxProgramming">YouTube channel</a> and my <a href="https://twitter.com/maxprogramming1">Twitter</a> üòâ</strong></p> <p>Thanks for reading ‚úå</p>]]></content><author><name>Usman Sabuwala</name></author><category term="web"/><category term="mongodb"/><category term="next-js"/><summary type="html"><![CDATA[Learn using Mongoose for MongoDB by building a hands-on project!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1650187197534/EONUGmGt8.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1650187197534/EONUGmGt8.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">No-Code Ways to Contribute to Open Source Projects</title><link href="https://genicsblog.com/benny/no-code-ways-to-contribute-to-open-source-projects" rel="alternate" type="text/html" title="No-Code Ways to Contribute to Open Source Projects"/><published>2022-04-14T00:00:00+00:00</published><updated>2022-04-14T00:00:00+00:00</updated><id>https://genicsblog.com/benny/how-to-contribute-to-open-source-projects-as-a-non-coder</id><content type="html" xml:base="https://genicsblog.com/benny/no-code-ways-to-contribute-to-open-source-projects"><![CDATA[<p>A few weeks ago, I came across Edidiong Asikpo‚Äôs <a href="https://edidiongasikpo.com/the-technical-writers-guide-to-contributing-to-open-source-projects">article</a> about contributing to open-source projects. The article piqued my interest and I set out to learn how to contribute to open-source projects without possibly writing any code.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907925426/tBnszIUMD.png" alt="get started with open source"/></p> <p>In this article, I will share with you what I discovered and also mention some non-code ways you can contribute, open-source projects you can contribute to, and helpful resources.</p> <h1 id="table-of-contents">Table of Contents</h1> <ul> <li><a href="#what-are-open-source-projects">What are Open Source Projects?</a></li> <li><a href="#how-can-technical-writers-and-non-code-individuals-contribute-to-open-source-projects">How can technical writers and non-code individuals contribute to open source projects?</a></li> <li><a href="#benefits-of-contributing-to-open-source-projects">Benefits of contributing to open-source projects</a></li> <li><a href="#open-source-projects">Open Source Projects</a></li> <li><a href="#conclusion">Conclusion</a></li> <li><a href="#helpful-resources">Helpful resources</a></li> </ul> <h1 id="what-are-open-source-projects">What are Open Source Projects?</h1> <p>Open Source is a term used to describe software whose original source code is freely available, can be redistributed, and also modified. Open Source embodies a spirit of collaboration, transparency, and community-oriented contributions, among other things.</p> <h1 id="how-can-technical-writers-and-non-code-individuals-contribute-to-open-source-projects">How can technical writers and non-code individuals contribute to open source projects?</h1> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634906360847/aibto3F98.png" alt="How can technical writer, designer and non coders contribute to open source" width="70%"/></p> <p>Like many people, I used to think it was impossible to contribute to open source projects without having any coding skills but reading various articles written by <a href="https://twitter.com/ParkerKesi">Kesi Parker</a> and <a href="https://twitter.com/Didicodes">Edidiong Asikpo</a> helped debunk this notion.</p> <p>In this section, I will mention some non-code ways you can contribute to open source projects as a non-coder.</p> <ol> <li> <p><strong>Do you like to write?</strong> You can help to improve or write the project documentation. You can also create translated documentation for the project.</p> </li> <li> <p><strong>How about design?</strong> As a designer, you can contribute to open source projects by restructuring the project‚Äôs usability. You can also create a logo and style guide.</p> </li> <li> <p><strong>Have a knack for organizing perhaps?</strong> You can suggest issues labels and close open issues to keep the repository clean.</p> </li> <li> <p><strong>Do you enjoy assisting others?</strong> Moderate discussion boards and respond to questions on forums like Microsoft Tech Community, Reddit, and Stack Overflow.</p> </li> <li> <p><strong>Teaching?</strong> Write how-to and educational tutorials, as well as supporting materials. You can also create YouTube videos about the software.</p> </li> <li> <p><strong>Advocating?</strong> Organize project-related workshops or meetups. You could motivate others by telling them about your personal experiences.</p> </li> <li> <p><strong>Join testing and insider programs:</strong> Finding and reporting bugs, and providing honest feedback on a project can increase its success rate and provide a better user experience.</p> </li> </ol> <p>So no, you don‚Äôt have to code to contribute. While this is by no means an exhaustive list, it should be enough to get you started.</p> <h1 id="benefits-of-contributing-to-open-source-projects">Benefits of contributing to open-source projects</h1> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634906376850/1b1HfYy7-.png" alt="Benefits of contributing to open source projects" width="70%"/></p> <p>While there are usually no direct monetary benefits to contributing, there are other ways you as a contributor can benefit:</p> <ul> <li>Upskilling and the opportunity to improve on existing skills.</li> <li>Creating a portfolio and personal achievement.</li> <li>Meeting like-minded people and networking.</li> <li>Understanding the application development and maintenance cycles.</li> <li>Community recognition.</li> <li>Self-recognition as an open-source contributor.</li> <li>Recommendation, referral, and increased job opportunities. Here is a <a href="https://www.freecodecamp.org/news/cracking-google-season-of-docs-2020/">testimony</a></li> <li>Mentorship and knowledge sharing.</li> <li>Community building.</li> <li><strong>Compensation:</strong> There are rarely any direct monetary incentives. However, programs such as <a href="https://developers.google.com/season-of-docs">Google Season of Docs</a>, <a href="https://summerofcode.withgoogle.com/">Google Summer of Code</a>, <a href="https://wiki.hyperledger.org/display/INTERN">Hyperledger Mentorship Program</a>, <a href="https://www.outreachy.org/">Outreachy</a>, and the <a href="https://docs.opencollective.com/help/contributing/development/bounties">Open Collective bounty program</a> pay you to contribute.</li> </ul> <h1 id="open-source-projects">Open Source Projects</h1> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634909151136/IR4gF5koo.png" alt="where can i find oen source projects"/></p> <p>Today, there are a lot of open-source projects you can contribute to and it is up to you to choose the ones that interest you. Below are a few open-source projects you can choose from; take your time to go through each resource and see which one appeals to you.</p> <ul> <li><a href="https://aws.amazon.com/blogs/aws/aws-documentation-is-now-open-source-and-on-github/">AWS</a></li> <li><a href="https://uber.github.io/#/">Uber</a></li> <li><a href="https://www.xwiki.org/xwiki/bin/view/Main/WebHome">XWiki</a></li> <li><a href="https://www.netlify.com/open-source/">Netlify</a></li> <li><a href="https://gitlab.com/gitlab-org/gitlab-docs">GitLab</a></li> <li><a href="https://fedoraproject.org/wiki/Join">Fedora</a></li> <li><a href="https://opensource.twitter.dev/">Twitter</a></li> <li><a href="https://wiki.gnome.org/DocumentationProject/Contributing">Gnome</a></li> <li><a href="https://support.mozilla.org/en-US/kb/improve-knowledge-base">Mozilla</a></li> <li><a href="https://spotify.github.io/">Spotify</a></li> <li><a href="https://opensource.google/">Google</a></li> <li><a href="https://httpd.apache.org/docs-project/">Apache</a></li> <li><a href="https://opensource.fb.com/">Facebook</a></li> <li><a href="https://kubernetes.io/docs/contribute/">Kubernetes</a></li> <li><a href="https://wiki.documentfoundation.org/Design">Wiki Design</a></li> <li><a href="https://www.bewelcome.org/">BeWelcome</a></li> <li><a href="https://github.com/MicrosoftDocs">Microsoft Docs</a></li> <li><a href="https://www.opensourceagenda.com/projects/wordpress-ios">WordPress IOS</a></li> <li><a href="https://awesomeopensource.com/projects/geeksforgeeks">GeeksforGeeks</a></li> <li><a href="https://www.opensourceagenda.com/projects/freecodecamp">FreeCodeCamp</a></li> <li><a href="https://docs.microsoft.com/en-us/powershell/scripting/community/contributing/overview">Microsoft PowerShell</a></li> <li><a href="https://www.redox-os.org/rsoc/">Redox OS Summer of Code</a></li> <li><a href="https://wiki.linuxfoundation.org/lkmp">Linux Kernel Mentorship Program</a></li> <li><a href="https://www.openmainframeproject.org/projects/mentorship-program">Open Mainframe Project Mentorship Program</a></li> </ul> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907052703/LjEoL70YX.png" alt="oen source projects to contribute for beginners" width="70%"/></p> <p>You can also use <a href="https://github.com/explore/">GitHub Explore</a>, <a href="https://awesomeopensource.com/projects/movies/tv-shows">Awesome Open-Source</a>, and <a href="https://www.opensourceagenda.com/">Open-Source Agenda</a> to find more open-source projects. If you‚Äôre only interested in documentation, <a href="https://amrutaranade.com/2018/03/21/list-of-open-source-projects-that-accept-docs-contributions/">Amruta‚Äôs article</a> can help, and <a href="https://www.works-hub.com/issues/">WorkHub</a> is a great place to start if you‚Äôre looking for job opportunities.</p> <h1 id="conclusion">Conclusion.</h1> <p>Contributing can be both enjoyable and rewarding.</p> <p>For a start, you should check out this repo</p> <ul> <li><a href="https://github.com/firstcontributions/first-contributions">beginner‚Äôs first contribution repository</a></li> <li><a href="https://github.com/mazipan/hello-open-source">Hello Open Source by Irfan Maulana</a></li> <li><a href="https://github.com/szabgab/awesome-for-non-programmers">Awesome for non-programmers</a> and make your first contribution right away.</li> </ul> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907775967/xtpNV3-xc.png" alt="how can you contribute to open source without coding" width="70%"/></p> <h1 id="helpful-resources">Helpful resources.</h1> <ul> <li> <p><strong>Hacktoberfest 2021:</strong> <a href="https://vinitshahdeo.dev/beginner-friendly-issues-for-hacktoberfest-2021">Beginner-friendly projects</a></p> </li> <li><strong>Contributing as a designer:</strong> <ul> <li><a href="https://opensourcedesign.net/contributing/">Open-source Design</a></li> <li><a href="https://uxdesign.cc/dear-designers-please-help-a5436907be8b">Dear designers, please contribute to open source</a></li> </ul> </li> <li><strong>Contributing as a technical writer:</strong> <ul> <li><a href="https://edidiongasikpo.com/the-technical-writers-guide-to-contributing-to-open-source-projects">The Technical Writers Guide to Contributing to Open Source Projects</a></li> <li><a href="https://medium.com/technical-writing-is-easy/open-source-projects-for-technical-writers-de53fb3dd4c9">Open-Source Projects for Technical Writers</a></li> </ul> </li> <li><strong>How to contribute to open source projects as a beginner?</strong> <ul> <li><a href="https://blog.toluadegboyega.dev/a-beginners-guide-to-open-source">A Beginner‚Äôs Guide to Open Source</a></li> <li><a href="https://www.freecodecamp.org/news/how-to-contribute-to-open-source-projects-beginners-guide/">How to Contribute to Open Source Projects ‚Äì A Beginner‚Äôs Guide</a></li> </ul> </li> <li><strong>Looking for the right fit?</strong> <a href="https://blog.avneesh.tech/finding-the-right-open-source-projects-to-contribute-to">Finding the Right Open Source Projects to Contribute to</a></li> </ul> <p>If you have read this far, I really appreciate it!</p> <p>You can connect with me at <a href="https://twitter.com/Bennykillua">Twitter</a>, <a href="https://www.linkedin.com/in/ifeanyi-iheagwara/">LinkedIn</a> or <a href="https://github.com/Bennykillua">Github</a>.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1634907816659/aeKfblKCv.png" alt="can anyone contribute to open source projects"/></p>]]></content><author><name>Benny Ifeanyi Iheagwara</name></author><category term="open-source"/><category term="beginners"/><category term="open-source"/><category term="tips"/><summary type="html"><![CDATA[In this article, I share what I have discovered about open-source and include some non-technical ways you can contribute to open-source projects along with helpful resources!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1634905825976/pjc7Kwv_F.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1634905825976/pjc7Kwv_F.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Adding Multiple Authors to a Jekyll Blog got Easier!</title><link href="https://genicsblog.com/gouravkhunger/adding-multiple-authors-to-a-jekyll-blog-got-easier" rel="alternate" type="text/html" title="Adding Multiple Authors to a Jekyll Blog got Easier!"/><published>2022-04-10T00:00:00+00:00</published><updated>2022-04-10T00:00:00+00:00</updated><id>https://genicsblog.com/gouravkhunger/adding-multiple-authors-to-a-jekyll-blog-got-easier</id><content type="html" xml:base="https://genicsblog.com/gouravkhunger/adding-multiple-authors-to-a-jekyll-blog-got-easier"><![CDATA[<p>A Jekyll powered blog doesn‚Äôt have the support for multiple authors out of the box. I faced the same issue for <a href="/">Genics Blog</a>. I‚Äôve built the blog from scratch using Jekyll.</p> <p>The primary feature of this publication is having the support for multiple authors. I have tackled this problem in two ways which I‚Äôll be discussing in this post!</p> <h1 id="1-traditional-approach-using-data-files">1. Traditional approach using data files</h1> <p>The traditional approach is very straight forward but comes with its own limitations.</p> <p>We start by defining a file inside the <strong><code class="language-plaintext highlighter-rouge">_data/</code></strong> folder that hosts author‚Äôs information.</p> <p><strong><code class="language-plaintext highlighter-rouge">_data/authors.yml</code></strong></p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">johndoe</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">John</span><span class="nv"> </span><span class="s">Doe"</span>
  <span class="na">bio</span><span class="pi">:</span> <span class="s2">"</span><span class="s">John</span><span class="nv"> </span><span class="s">Doe</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">software</span><span class="nv"> </span><span class="s">engineer."</span>
  <span class="na">email</span><span class="pi">:</span> <span class="s2">"</span><span class="s">john@example.com"</span>
  <span class="na">socials</span><span class="pi">:</span>
    <span class="na">github</span><span class="pi">:</span> <span class="s2">"</span><span class="s">john-doe"</span>
    <span class="na">twitter</span><span class="pi">:</span> <span class="s2">"</span><span class="s">john_doe"</span>

<span class="na">janedoe</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Jane</span><span class="nv"> </span><span class="s">Doe"</span>
  <span class="na">bio</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Jane</span><span class="nv"> </span><span class="s">Doe</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">systems</span><span class="nv"> </span><span class="s">engineer."</span>
  <span class="na">email</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jane@example.com"</span>
  <span class="na">socials</span><span class="pi">:</span>
    <span class="na">github</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jane-doe"</span>
    <span class="na">twitter</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jane_doe"</span>
</code></pre></div></div> <p>Now we have the author objects in this file. Then we generate a layout that has the blueprint for the author‚Äôs page. A minimal layout looks like this:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

{% assign author = site.data.authors[page.author] %}
<span class="c">&lt;!--
  Now you can use the author variable.
  It has all the data as defined inside _data/authors.yml for the current author.
--&gt;</span>

  <span class="nt">&lt;head&gt;</span>
    <span class="c">&lt;!-- See how we can use values inside the author variable. --&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"description"</span> <span class="na">content=</span><span class="s">{{</span> <span class="na">author.bio</span> <span class="err">}}</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- other stuff --&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{ author.name }}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>{{ author.bio }}<span class="nt">&lt;/p&gt;</span>

    {% assign links = author.socials %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.twitter }}"</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.github }}"</span><span class="nt">&gt;</span>GitHub<span class="nt">&lt;/a&gt;</span>

    <span class="c">&lt;!--
      Here we get all the posts by the author of the current page.
      And then render a post preview box for each of the post.
    --&gt;</span>
    {% assign posts = site.posts | where_exp:"item", "item.author == page.author" %}
    {% for post in posts %}
      {% include postbox.html %}
    {% endfor %}
  <span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <p>Here, we get the author data for the current page and assign relevant meta information on the page. The information comes from the data files we set.</p> <p>Then we get all the posts by the author of the current page using the <code class="language-plaintext highlighter-rouge">where_exp</code> filter (<a href="https://jekyllrb.com/docs/liquid/filters/">docs for filters</a>). Then we render a post preview box for each of the post.</p> <p>The postbox can be any way you want to present the post. This is similar to what an index page would have as as to keep the structure uniform.</p> <p>Now, we assign an author to each post in the site by adding this to the post‚Äôs front matter:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="c1"># other config</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">johndoe</span>
<span class="nn">---</span>
</code></pre></div></div> <p>We need to keep the same author username as defined in the data file.</p> <p>This sets up the configuration for the author‚Äôs page. But the pages won‚Äôt be rendered because Jekyll doesn‚Äôt know where to render the pages.</p> <p>Now, we create a collection for the author pages so that we can output author pages at the desired location.</p> <p>To create the collection, add this to the <code class="language-plaintext highlighter-rouge">_config.yml</code> file:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">collections</span><span class="pi">:</span>
  <span class="na">authors</span><span class="pi">:</span>
    <span class="na">output</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">permalink</span><span class="pi">:</span> <span class="s">/author/:author/</span>
</code></pre></div></div> <p>This let‚Äôs us have a folder named <code class="language-plaintext highlighter-rouge">_authors/</code> in the root directoy and have the markdown files for authors there. <a href="https://jekyllrb.com/docs/collections/">More on collections &gt;</a></p> <p>Inside the folder, we add individual files named <code class="language-plaintext highlighter-rouge">johndoe.md</code> and <code class="language-plaintext highlighter-rouge">janedoe.md</code>. This renders these files at endpoints <code class="language-plaintext highlighter-rouge">/author/johndoe</code> and <code class="language-plaintext highlighter-rouge">/author/janedoe</code> respectively.</p> <p>Make sure to add these lines in the files (variable <code class="language-plaintext highlighter-rouge">author</code> changes as per file):</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">author</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">johndoe</span>
<span class="nn">---</span>
</code></pre></div></div> <p>That‚Äôs it!</p> <p>This is the general way that allows us to add multiple authors to a simple Jekyll blog. Nothing fancy here. It was a bit long to setup but adding new authors is as easy as creating a new file in <code class="language-plaintext highlighter-rouge">_authors</code> folder, defining data in <code class="language-plaintext highlighter-rouge">_data/authors.yml</code> and adding the author‚Äôs name to the post‚Äôs front matter.</p> <p>But you see, this process is way tedious!</p> <p>You have to add the file for each author. Sure, it scales well upto about 10-15 authors. But for a publication like <a href="/">Genics Blog</a> that is consistently gaining traction for new authors, this becomes a pain.</p> <p>I had set up an automated process using GitHub Actions that would add the markdown file in <code class="language-plaintext highlighter-rouge">_authors</code> folder as soon as a PR for a new author profile is received. But that doesn‚Äôt scale well and isn‚Äôt the most optimum way to do it!</p> <p>So I spent some time building up a solution for this. Let‚Äôs look at how it works!</p> <h1 id="2-using-my-plugin-jekyll-auto-authors">2. Using my plugin jekyll-auto-authors</h1> <p>There‚Äôs a major issue of pagination with the above approach. For example, let‚Äôs take <a href="/author/gouravkhunger/">my profile</a> at Genics Blog. I‚Äôve got tons of posts. Along with Each post has a thumbnail image associated with it.</p> <p>The above method doesn‚Äôt have pagination support. Now if all the posts are listed in a single page, the page speed becomes too low.</p> <p>I‚Äôve already setup <a href="https://github.com/sverrirs/jekyll-paginate-v2"><code class="language-plaintext highlighter-rouge">jekyll-paginate-v2</code></a> for paginating category and tag pages. But it doesn‚Äôt work with authors. Also, it has got an amazing autopages feature for auto-generating category and tag pages that I use extensively for Genics.</p> <p>I wished to integrate autopages for authors functionality to it, but the paginate-v2 plugin isn‚Äôt being actively maintained. So I decided to build <a href="https://github.com/gouravkhunger/jekyll-auto-authors" rel="dofollow"><code class="language-plaintext highlighter-rouge">jekyll-auto-authors</code></a> that works in sync with it. Drop a star at GitHub to show support!</p> <p>Let‚Äôs look at how to start using the plugin. If you prefer a video tutorial, watch this:</p> <div class="mb-6 aspect-video"> <iframe src="https://www.youtube.com/embed/V5Ly6T_bWwU" class="w-full h-full rounded-xl" allowfullscreen="" loading="lazy"> </iframe> </div> <h2 id="setup">Setup</h2> <p>Add the plugin to your <code class="language-plaintext highlighter-rouge">Gemfile</code> inside <code class="language-plaintext highlighter-rouge">jekyll_plugins</code> group:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">group</span> <span class="ss">:jekyll_plugins</span> <span class="k">do</span>
    <span class="c1"># other gems</span>
    <span class="n">gem</span> <span class="s2">"jekyll-paginate-v2"</span> <span class="c1"># reqiured for jekyll-auto-authors to work</span>
    <span class="n">gem</span> <span class="s2">"jekyll-auto-authors"</span>
<span class="k">end</span>
</code></pre></div></div> <p>Now, execute:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div> <h2 id="usage">Usage</h2> <p>This plugin fits well inside the configuration for <code class="language-plaintext highlighter-rouge">jekyll-paginate-v2</code> plugin.</p> <p>First, you need to set pagination configuration inside <code class="language-plaintext highlighter-rouge">_config.yml</code> file. This is similar to what the pagination plugin does.</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pagination</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">per_page</span><span class="pi">:</span> <span class="m">9</span>
  <span class="na">permalink</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/page/:num/'</span>
  <span class="na">title</span><span class="pi">:</span> <span class="s1">'</span><span class="s">:title</span><span class="nv"> </span><span class="s">-</span><span class="nv"> </span><span class="s">page</span><span class="nv"> </span><span class="s">:num'</span>
  <span class="na">sort_field</span><span class="pi">:</span> <span class="s1">'</span><span class="s">date'</span>
  <span class="na">sort_reverse</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div> <p>This configuration will be used for the pagination on the generated author pages. The above example defines that each page should get 9 posts at max. The permalink of first page is same, but the later pages get <code class="language-plaintext highlighter-rouge">/page/:num</code> appended to it. <code class="language-plaintext highlighter-rouge">:num</code> gets converted to the page number.</p> <p>You can skip the pagination by setting <code class="language-plaintext highlighter-rouge">enabled: false</code>, if you only care about auto-generation of author pages.</p> <p>Now we‚Äôll define the autopages config for authors.</p> <p>Define an <code class="language-plaintext highlighter-rouge">autopages</code> block to set up author autopages:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">autopages</span><span class="pi">:</span>

  <span class="c1"># Other autopage configs for jekyll-paginate-v2 stay the same</span>

  <span class="na">authors</span><span class="pi">:</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span> <span class="c1"># adding false here stops the auto-generation</span>
    <span class="na">data</span><span class="pi">:</span> <span class="s1">'</span><span class="s">_data/authors.yml'</span> <span class="c1"># Data file with the author details</span>
    <span class="na">layouts</span><span class="pi">:</span> 
      <span class="pi">-</span> <span class="s1">'</span><span class="s">author.html'</span> <span class="c1"># We'll define this layout later, will be used for each author</span>
    <span class="na">title</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Posts</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">:author'</span>
    <span class="na">permalink</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/author/:author/'</span>
    <span class="na">slugify</span><span class="pi">:</span>
      <span class="na">mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">default'</span> <span class="c1"># choose from [raw, default, pretty, ascii or latin]</span>
      <span class="na">cased</span><span class="pi">:</span> <span class="no">true</span> <span class="c1"># if true, the uppercase letters in slug will be converted to lowercase ones.</span>
</code></pre></div></div> <p>That‚Äôs it for the autopages and pagination configuration.</p> <p>As an example, we will use the same <code class="language-plaintext highlighter-rouge">_data/authors.yml</code> file as generated in the previous step.</p> <p>All the data for an author is passed on to the liquid template inside the <code class="language-plaintext highlighter-rouge">page.pagination.author_data</code> variable so that you can render it as you wish!</p> <p>Let‚Äôs define a basic template for the <code class="language-plaintext highlighter-rouge">author.html</code> layout so you get a gist of how to use it:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>

{% assign author = page.pagination.author_data %}
<span class="c">&lt;!--
  Now you can use the author variable anyhow.
  It has all the data as defined inside _data/authors.yml for the current author.
--&gt;</span>

  <span class="nt">&lt;head&gt;</span>
    <span class="c">&lt;!-- See how we can use values inside the author variable. --&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"description"</span> <span class="na">content=</span><span class="s">{{</span> <span class="na">author.bio</span> <span class="err">}}</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- other stuff --&gt;</span>
  <span class="nt">&lt;/head&gt;</span>

  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>{{ author.name }}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>{{ author.bio }}<span class="nt">&lt;/p&gt;</span>

    {% assign links = author.socials %}
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.twitter }}"</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ link.github }}"</span><span class="nt">&gt;</span>GitHub<span class="nt">&lt;/a&gt;</span>

    <span class="c">&lt;!--
      The main logic for rendering an author's posts resides here.
      The plugin exposes a paginator object that you can use to loop through the post.
      It handles all the pagination logic for you.
    --&gt;</span>
    {% for post in paginator.posts %}
      {% include postbox.html %}
    {% endfor %}

    <span class="c">&lt;!--
      If you don't want pagination, you can use the old way!
    --&gt;</span>
    {% assign posts = site.posts | where_exp:"item", "item.author.name == author.name" %}
    {% for post in posts %}
      {% include postbox.html %}
    {% endfor %}
  <span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <p>That‚Äôs it for the configuration!</p> <p>Now, you can go to any post and just drop in the username to the frontmatter of the post.</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="c1"># other configs</span>
<span class="na">author</span><span class="pi">:</span> <span class="s">johndoe</span>
<span class="nn">---</span>
</code></pre></div></div> <p>Once you run the build, you‚Äôll see the author page for <code class="language-plaintext highlighter-rouge">johndoe</code> come inside the <code class="language-plaintext highlighter-rouge">_site/author/johndoe/</code> directory. If there are a lot of posts by <code class="language-plaintext highlighter-rouge">johndoe</code> and pagination is set up correctly, it will generate pagination pages as defined in the <code class="language-plaintext highlighter-rouge">pagination</code> block of <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <h2 id="how-does-it-work">How does it work?</h2> <p>Read on how it works at the <a href="https://github.com/gouravkhunger/jekyll-auto-authors#how-does-it-work">GitHub repository</a>.</p> <h1 id="conclusion">Conclusion</h1> <p>I hope this article helped you understand the different ways to add multiple authors to a Jekyll blog!</p> <p>Quick recap, we learnt how to add multiple authors to a Jekyll blog:</p> <ul> <li>Using the traditional manual author pages with data file method. This has caveats.</li> <li>Using my plugin <a href="https://github.com/gouravkhunger/jekyll-auto-authors"><code class="language-plaintext highlighter-rouge">jekyll-auto-authors</code></a> which also has pagination support.</li> </ul> <p>Please drop a comment or join <a href="https://discord.genicsblog.com">our discord server</a> if you need some help!</p>]]></content><author><name>Gourav Khunger</name></author><category term="jekyll"/><category term="open-source"/><category term="libraries"/><summary type="html"><![CDATA[Jekyll doesn't support multiple authors out of the box. But we can add that functionality using this plugin I made!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/162621431-f9004144-8a56-4cb5-b3ac-5c5a2660a6fa.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/162621431-f9004144-8a56-4cb5-b3ac-5c5a2660a6fa.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>